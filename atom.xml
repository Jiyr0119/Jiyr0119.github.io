<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jonathon&#39;s Blog</title>
  
  <subtitle>Be a better man</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.jonathon.cn/"/>
  <updated>2019-06-27T08:43:16.367Z</updated>
  <id>https://www.jonathon.cn/</id>
  
  <author>
    <name>Jonathon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>陪你写一个Vue全局拖拽组件</title>
    <link href="https://www.jonathon.cn/vue-components.html"/>
    <id>https://www.jonathon.cn/vue-components.html</id>
    <published>2019-06-04T07:53:42.000Z</published>
    <updated>2019-06-27T08:43:16.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大佬们，都是手摸手带你们学习，而我就摸不了你们的小手了。因为可能我分享的内容，是一些大家早已知悉的内容，只不过这个需求，挺有意思的，我实现完之后。写这个文章为了分享一些能帮助到别人的内容，也是为了归档一下自己的知识点。有写的不好的地方望指正。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>大家在浏览电商的 app 的时候，大多数在详情页的右下角上方，会有一个悬浮的按钮。用来分享商品详情、或者回到首页等功能的实现。我们的项目呢是，基于小程序的一款金融平台，应用了小程序原声+webview 的方案。因为 webview 里面路由跳转是 vue 的跳转，小程序并没有 navigateto，在不同系统，机型上，小程序的 webview 实现方式有所不同，而且页面层级增加之后。就会导致用户回退的时候，可能会点很多次才能回到小程序的原生页面。<a id="more"></a> 所以我们也采用了这一方案。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>组件好多的内容，很多大神都有文章来写的用法概念什么，我就不一一赘述了。首先这种组件在我们项目里面是 webview 里面所有页面都要用的，肯定得是一个全局组件，如果一个个引入那真滴是太 low 了。</p><p><img src="/vue-components/t9.jpeg"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;大佬们，都是手摸手带你们学习，而我就摸不了你们的小手了。因为可能我分享的内容，是一些大家早已知悉的内容，只不过这个需求，挺有意思的，我实现完之后。写这个文章为了分享一些能帮助到别人的内容，也是为了归档一下自己的知识点。有写的不好的地方望指正。&lt;/p&gt;
&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;大家在浏览电商的 app 的时候，大多数在详情页的右下角上方，会有一个悬浮的按钮。用来分享商品详情、或者回到首页等功能的实现。我们的项目呢是，基于小程序的一款金融平台，应用了小程序原声+webview 的方案。因为 webview 里面路由跳转是 vue 的跳转，小程序并没有 navigateto，在不同系统，机型上，小程序的 webview 实现方式有所不同，而且页面层级增加之后。就会导致用户回退的时候，可能会点很多次才能回到小程序的原生页面。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue性能优化与构建优化</title>
    <link href="https://www.jonathon.cn/vue-dll.html"/>
    <id>https://www.jonathon.cn/vue-dll.html</id>
    <published>2019-03-26T11:33:25.000Z</published>
    <updated>2019-03-26T12:45:22.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-开启-gzip-压缩"><a href="#Vue-开启-gzip-压缩" class="headerlink" title="Vue 开启 gzip 压缩"></a>Vue 开启 gzip 压缩</h2><ol><li>首先打开 config/index.js，找到 build 对象中的 productionGzip，改成 true</li><li>打开 productionGzip: true 之前，先要安装依赖 compression-webpack-plugin，官方推荐的命令是：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev compression-webpack-plugin</span><br><span class="line"></span><br><span class="line">webpack.prod.conf.js 中加入</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 开启 gzip 的情况下使用下方的配置 */</span></span><br><span class="line"><span class="keyword">if</span> (config.build.productionGzip) &#123;</span><br><span class="line">  <span class="comment">/* 加载 compression-webpack-plugin 插件 */</span></span><br><span class="line">  <span class="keyword">var</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">'compression-webpack-plugin'</span>)</span><br><span class="line">  <span class="comment">/* 向webpackconfig.plugins中加入下方的插件 */</span></span><br><span class="line">  webpackConfig.plugins.push(</span><br><span class="line">    <span class="comment">/* 使用 compression-webpack-plugin 插件进行压缩 */</span></span><br><span class="line">    <span class="keyword">new</span> CompressionWebpackPlugin(&#123;</span><br><span class="line">      asset: <span class="string">'[path].gz[query]'</span>,</span><br><span class="line">      algorithm: <span class="string">'gzip'</span>,</span><br><span class="line">      test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(</span><br><span class="line">        <span class="string">'\\.('</span> +</span><br><span class="line">        config.build.productionGzipExtensions.join(<span class="string">'|'</span>) +</span><br><span class="line">        <span class="string">')$'</span></span><br><span class="line">      ),</span><br><span class="line">      threshold: <span class="number">10240</span>,</span><br><span class="line">      minRatio: <span class="number">0.8</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>我在开启的过程中，发现一个报错的问题。 答案在这里 <a href="https://segmentfault.com/q/1010000016302841" target="_blank" rel="noopener">https://segmentfault.com/q/1010000016302841</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 卸载之前的compression-webpack-plugin安装包，执行命令：</span><br><span class="line">npm uninstall --save-dev compression-webpack-plugin</span><br><span class="line"><span class="number">2.</span> 重新安装<span class="number">1.1</span><span class="number">.11</span>版本，执行命令：</span><br><span class="line">npm install --save-dev compression-webpack-plugin@<span class="number">1.1</span><span class="number">.11</span></span><br><span class="line"><span class="number">3.</span> 等安装好之后，重新运行命令：</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>打包成功如下图：<br><img src="https://user-gold-cdn.xitu.io/2019/3/26/169b9d55f49f603a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><h2 id="gzip-压缩原理"><a href="#gzip-压缩原理" class="headerlink" title="gzip 压缩原理"></a>gzip 压缩原理</h2><p>但是不是每个浏览器都支持 gzip 的，如果知道客户端是否支持 gzip 呢，请求头中有个 Accept-Encoding 来标识对压缩的支持。客户端 http 请求头声明浏览器支持的压缩方式，服务端配置启用压缩，压缩的文件类型，压缩方式。当客户端请求到服务端的时候，服务器解析请求头，如果客户端支持 gzip 压缩，响应时对请求的资源进行压缩并返回给客户端，浏览器按照自己的方式解析，在 http 响应头，我们可以看到 content-encoding:gzip，这是指服务端使用了 gzip 的压缩方式。<br><img src="https://user-gold-cdn.xitu.io/2019/3/26/169b9d6d4dff1b03?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><br>那么怎么看有没有用 gzip 压缩的文件呢，打开 f12，查看 network，按照下面的方式过滤<br><img src="https://user-gold-cdn.xitu.io/2019/3/26/169b9d6d4e042886?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><br>content-encoding 是 gzip 的话就说明返回的是 gzip<br>还有一点 gzip 不压缩图片，因为压缩之后会更大- -，所以一般到是压缩 css 和 js。剩下的事情就可以交给后端的童鞋们去处理了。</p><h2 id="Vue-编译速度提升-DllPlugin"><a href="#Vue-编译速度提升-DllPlugin" class="headerlink" title="Vue 编译速度提升-DllPlugin"></a>Vue 编译速度提升-DllPlugin</h2><p>未进行打包优化的痛点：</p><p>随着项目的不断扩大，引入的第三方库会越来越多，我们每次 build 的时候会对所有的文件进行打包，耗时必定很长，不利于日常开发。</p><p>解决思路：</p><p>第三方库我们只是引入到项目里来，一般不会经常性的去修改源码，一般都是在 src 目录下编写业务代码，因此可以把第三方依赖和 src 分开打包。<br>每次 build 的时候我们只需要把之前 build 好的第三方依赖文件引入到项目中即可，避免了我们每次 build 的时候都会 build 第三方依赖。当第三方依赖发生改变的时候我们只需要把第三方依赖再 build 一次就行。<br>很多优化效果的文章，记录一下自己优化的过程。<br>首先在 build 文件夹下(根目录，config 目录下都可以)创建 webpack.dll.conf.js。内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 你想要打包的模块的数组</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendor: [</span><br><span class="line">      <span class="string">'vue'</span>,</span><br><span class="line">      <span class="string">'vuex'</span>,</span><br><span class="line">      <span class="string">'axios'</span>,</span><br><span class="line">      <span class="string">'vue-router'</span>,</span><br><span class="line">      <span class="string">'echarts'</span>,</span><br><span class="line">      <span class="string">'jsencrypt'</span>,</span><br><span class="line">      <span class="string">'moment'</span>,</span><br><span class="line">      <span class="string">'mobile-detect'</span>,</span><br><span class="line">      <span class="string">'crypto-js'</span>,</span><br><span class="line">      <span class="string">'better-scroll'</span>,</span><br><span class="line">      <span class="string">'vue/dist/vue.esm.js'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'../static/js'</span>), <span class="comment">// 打包后文件输出的位置</span></span><br><span class="line">    filename: <span class="string">'[name].dll.js'</span>,</span><br><span class="line">    library: <span class="string">'[name]_library'</span></span><br><span class="line">    <span class="comment">// vendor.dll.js中暴露出的全局变量名。</span></span><br><span class="line">    <span class="comment">// 主要是给DllPlugin中的name使用，</span></span><br><span class="line">    <span class="comment">// 故这里需要和webpack.DllPlugin中的`name: '[name]_library',`保持一致。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      path: path.join(__dirname, <span class="string">'.'</span>, <span class="string">'[name]-manifest.json'</span>),</span><br><span class="line">      name: <span class="string">'[name]_library'</span>,</span><br><span class="line">      context: __dirname</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 压缩打包的文件，与该文章主线无关</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      output: &#123;</span><br><span class="line">        beautify: <span class="literal">false</span>, <span class="comment">//最紧凑的输出，不保留空格和制表符</span></span><br><span class="line">        comments: <span class="literal">false</span> <span class="comment">//删除所有注释</span></span><br><span class="line">      &#125;,</span><br><span class="line">      parallel: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将第三方包抽离出来打包的脚本已经写好了，需要编写一条命令来执行该脚本。<br>package.json 中 scripts 下加入该命令”dll”: “webpack –config build/webpack.dll.conf.js”执行下 npm run dll<br>命令将第三方依赖进行打包如下图:<br><img src="https://user-gold-cdn.xitu.io/2019/3/26/169b9ef2b96bb523?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><br>可以看到在项目中生成了 vendor-manifest.json 和 vendor.dll.js 这两个文件<br><img src="https://user-gold-cdn.xitu.io/2019/3/26/169b9f19f9206c58?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><br>最后在 html 里面引入 vendor.js 就大功告成了<br><img src="https://user-gold-cdn.xitu.io/2019/3/26/169b9f353fd7b068?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><p>还有今天在搞优化的时候发现一个大佬的<a href="https://www.jeffjade.com/" target="_blank" rel="noopener">博客</a>，还发现大佬配图很棒棒。<br><img src="https://user-gold-cdn.xitu.io/2019/3/26/169b9f6bea8f10f5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><p>图棒不棒的不重要，主要是我爱学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vue-开启-gzip-压缩&quot;&gt;&lt;a href=&quot;#Vue-开启-gzip-压缩&quot; class=&quot;headerlink&quot; title=&quot;Vue 开启 gzip 压缩&quot;&gt;&lt;/a&gt;Vue 开启 gzip 压缩&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;首先打开 config/index.js，找到 build 对象中的 productionGzip，改成 true&lt;/li&gt;
&lt;li&gt;打开 productionGzip: true 之前，先要安装依赖 compression-webpack-plugin，官方推荐的命令是：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev compression-webpack-plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webpack.prod.conf.js 中加入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 开启 gzip 的情况下使用下方的配置 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (config.build.productionGzip) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* 加载 compression-webpack-plugin 插件 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; CompressionWebpackPlugin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;compression-webpack-plugin&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* 向webpackconfig.plugins中加入下方的插件 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  webpackConfig.plugins.push(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* 使用 compression-webpack-plugin 插件进行压缩 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CompressionWebpackPlugin(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      asset: &lt;span class=&quot;string&quot;&gt;&#39;[path].gz[query]&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      algorithm: &lt;span class=&quot;string&quot;&gt;&#39;gzip&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      test: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;\\.(&#39;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        config.build.productionGzipExtensions.join(&lt;span class=&quot;string&quot;&gt;&#39;|&#39;&lt;/span&gt;) +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;)$&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      threshold: &lt;span class=&quot;number&quot;&gt;10240&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      minRatio: &lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://www.jonathon.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.jonathon.cn/tags/vue/"/>
    
      <category term="javascript" scheme="https://www.jonathon.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JSON Web Token 入门教程</title>
    <link href="https://www.jonathon.cn/jwt.html"/>
    <id>https://www.jonathon.cn/jwt.html</id>
    <published>2019-03-04T11:04:12.000Z</published>
    <updated>2019-03-04T11:39:46.901Z</updated>
    
    <content type="html"><![CDATA[<p>JSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案，本文介绍它的原理和用法。<br><img src="https://www.wangbase.com/blogimg/asset/201807/bg2018072301.jpg"></p><h2 id="一、跨域认证的问题"><a href="#一、跨域认证的问题" class="headerlink" title="一、跨域认证的问题"></a>一、跨域认证的问题</h2><p>互联网服务离不开用户认证。一般流程是下面这样。</p><ol><li>用户向服务器发送用户名和密码。</li><li>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</li><li>服务器向用户返回一个 session_id，写入用户的 Cookie。</li><li>用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</li><li>服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</li></ol><p>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</p><p>举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？</p><p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</p><p>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表</p><a id="more"></a><h2 id="二、JWT-的原理"><a href="#二、JWT-的原理" class="headerlink" title="二、JWT 的原理"></a>二、JWT 的原理</h2><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"姓名"</span>: <span class="string">"张三"</span>,</span><br><span class="line">  <span class="string">"角色"</span>: <span class="string">"管理员"</span>,</span><br><span class="line">  <span class="string">"到期时间"</span>: <span class="string">"2018年7月1日0点0分"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p><p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p><h2 id="三、JWT-的数据结构"><a href="#三、JWT-的数据结构" class="headerlink" title="三、JWT 的数据结构"></a>三、JWT 的数据结构</h2><p>实际的 JWT 大概就像下面这样。<br><img src="https://www.wangbase.com/blogimg/asset/201807/bg2018072304.jpg"><br>它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</p><p>JWT 的三个部分依次如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Header（头部）</span><br><span class="line">Payload（负载）</span><br><span class="line">Signature（签名）</span><br></pre></td></tr></table></figure><p>写成一行，就是下面的样子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header.Payload.Signature;</span><br></pre></td></tr></table></figure><p><img src="https://www.wangbase.com/blogimg/asset/201807/bg2018072303.jpg"><br>下面依次介绍这三个部分。</p><h3 id="3-1-Header"><a href="#3-1-Header" class="headerlink" title="3.1 Header"></a>3.1 Header</h3><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="string">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码中，alg属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ属性表示这个令牌（token）的类型（type），JWT 令牌统一写为JWT。</p><p>最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。</p><h3 id="3-2-Payload"><a href="#3-2-Payload" class="headerlink" title="3.2 Payload"></a>3.2 Payload</h3><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了 7 个官方字段，供选用。</p><ul><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"sub"</span>: <span class="string">"1234567890"</span>,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">  <span class="string">"admin"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p><p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><h3 id="3-3-Signature"><a href="#3-3-Signature" class="headerlink" title="3.3 Signature"></a>3.3 Signature</h3><p>Signature 部分是对前两部分的签名，防止数据篡改。</p><p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + <span class="string">"."</span> + base64UrlEncode(payload), secret);</span><br></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p><h3 id="3-4-Base64URL"><a href="#3-4-Base64URL" class="headerlink" title="3.4 Base64URL"></a>3.4 Base64URL</h3><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。</p><h2 id="四、JWT-的使用方式"><a href="#四、JWT-的使用方式" class="headerlink" title="四、JWT 的使用方式"></a>四、JWT 的使用方式</h2><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息 Authorization 字段里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure><p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p><h2 id="五、JWT-的几个特点"><a href="#五、JWT-的几个特点" class="headerlink" title="五、JWT 的几个特点"></a>五、JWT 的几个特点</h2><p>（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p><p>（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。</p><p>（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</p><p>（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p><p>（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p><p>（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</p><p>转自<a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">阮老师的博客</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案，本文介绍它的原理和用法。&lt;br&gt;&lt;img src=&quot;https://www.wangbase.com/blogimg/asset/201807/bg2018072301.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、跨域认证的问题&quot;&gt;&lt;a href=&quot;#一、跨域认证的问题&quot; class=&quot;headerlink&quot; title=&quot;一、跨域认证的问题&quot;&gt;&lt;/a&gt;一、跨域认证的问题&lt;/h2&gt;&lt;p&gt;互联网服务离不开用户认证。一般流程是下面这样。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户向服务器发送用户名和密码。&lt;/li&gt;
&lt;li&gt;服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。&lt;/li&gt;
&lt;li&gt;服务器向用户返回一个 session_id，写入用户的 Cookie。&lt;/li&gt;
&lt;li&gt;用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。&lt;/li&gt;
&lt;li&gt;服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。&lt;/p&gt;
&lt;p&gt;举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？&lt;/p&gt;
&lt;p&gt;一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。&lt;/p&gt;
&lt;p&gt;另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://www.jonathon.cn/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="JavaScript" scheme="https://www.jonathon.cn/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://www.jonathon.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Javascript AJAX</title>
    <link href="https://www.jonathon.cn/js7.html"/>
    <id>https://www.jonathon.cn/js7.html</id>
    <published>2019-03-01T08:49:08.000Z</published>
    <updated>2019-03-01T09:14:50.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-AJAX？"><a href="#什么是-AJAX？" class="headerlink" title="什么是 AJAX？"></a>什么是 AJAX？</h2><p>AJAX = 异步 JavaScript 和 XML。</p><p>AJAX 是一种用于创建快速动态网页的技术。</p><p>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><p>传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。</p><p>有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图等。</p><h2 id="AJAX-的作用"><a href="#AJAX-的作用" class="headerlink" title="AJAX 的作用"></a>AJAX 的作用</h2><p>当向后台发送少量的数据时，通过 AJAX 的技术可以实现界面局部刷新，提高程序的运行效率。</p><p>ajax 技术可以实现整个页面无刷新<br><img src="http://p1.pstatp.com/large/4af400003265167c138b"></p><h2 id="同步和异步的区别"><a href="#同步和异步的区别" class="headerlink" title="同步和异步的区别"></a>同步和异步的区别</h2><p>你应该知道，javascript 语言是一门“单线程”的语言，不像 java 语言，类继承 Thread 再来个 thread.start 就可以开辟一个线程，所以，javascript 就像一条流水线，仅仅是一条流水线而已，要么加工，要么包装，不能同时进行多个任务和流程。</p><p>我个人觉得 js 官方的文档在使用两个词的时候并不准确，包括很多其他词汇，都只是听起来高深，但实际应用好像跟这些词没半毛钱关系。例如“事件委托”这个词，不知道的人乍一看谁又能说出“事件委托”是什么意思？委托什么事件？怎么个委托，我看不如干脆就叫“事件在外层元素中的捕获”，虽然长一点，一下就能看懂。</p><p>其实同步和异步，无论如何，做事情的时候都是只有一条流水线（单线程），同步和异步的差别就在于这条流水线上各个流程的执行顺序不同。</p><a id="more"></a><p>最基础的异步是 setTimeout 和 setInterval 函数，很常见，但是很少人有人知道其实这就是异步，因为它们可以控制 js 的执行顺序。我们也可以简单地理解为：可以改变程序正常执行顺序的操作就可以看成是异步操作。如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"1"</span> );</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log( <span class="string">"2"</span> )</span><br><span class="line">        &#125;, <span class="number">0</span> );</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log( <span class="string">"3"</span> )</span><br><span class="line">        &#125;, <span class="number">0</span> );</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log( <span class="string">"4"</span> )</span><br><span class="line">        &#125;, <span class="number">0</span> );</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"5"</span> );</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">输出顺序是什么呢？ 1 5 2 3 4;</span></span><br></pre></td></tr></table></figure><p>可见，尽管我们设置了 setTimeout（function，time）中的等待时间为 0，结果其中的 function 还是后执行。</p><p>火狐浏览器的 api 文档有这样一句话：Because even though setTimeout was called with a delay of zero, it’s placed on a queue and scheduled to run at the next opportunity, not immediately. Currently executing code must complete before functions on the queue are executed, the resulting execution order may not be as expected.</p><p>意思就是：尽管 setTimeout 的 time 延迟时间为 0，其中的 function 也会被放入一个队列中，等待下一个机会执行，当前的代码（指不需要加入队列中的程序）必须在该队列的程序完成之前完成，因此结果可能不与预期结果相同。</p><p>这里说到了一个“队列”（即任务队列），该队列放的是什么呢，放的就是 setTimeout 中的 function，这些 function 依次加入该队列，即该队列中所有 function 中的程序将会在该队列以外的所有代码执行完毕之后再以此执行，这是为什么呢？因为在执行程序的时候，浏览器会默认 setTimeout 以及 ajax 请求这一类的方法都是耗时程序（尽管可能不耗时），将其加入一个队列中，该队列是一个存储耗时程序的队列，在所有不耗时程序执行过后，再来依次执行该队列中的程序。</p><p>又回到了最初的起点——javascript 是单线程。单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。于是就有一个概念——任务队列。如果排队是因为计算量大，CPU 忙不过来，倒也算了，但是很多时候 CPU 是闲着的，因为 IO 设备（输入输出设备）很慢（比如 Ajax 操作从网络读取数据），不得不等着结果出来，再往下执行。于是 JavaScript 语言的设计者意识到，这时主线程完全可以不管 IO 设备，挂起处于等待中的任务，先运行排在后面的任务。等到 IO 设备返回了结果，再回过头，把挂起的任务继续执行下去。</p><p>于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有等主线程任务执行完毕，”任务队列”开始通知主线程，请求执行任务，该任务才会进入主线程执行。</p><p>具体来说，异步运行机制如下：</p><p>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。<br>（2）主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。<br>（3）一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。<br>（4）主线程不断重复上面的第三步。</p><p>只要主线程空了，就会去读取”任务队列”，这就是 JavaScript 的运行机制。这个过程会不断重复。</p><p>“任务队列”是一个事件的队列（也可以理解成消息的队列），IO 设备完成一项任务，就在”任务队列”中添加一个事件，表示相关的异步任务可以进入”执行栈”了。主线程读取”任务队列”，就是读取里面有哪些事件。<br>“任务队列”中的事件，除了 IO 设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等），比如$(selectot).click(function)，这些都是相对耗时的操作。只要指定过这些事件的回调函数，这些事件发生时就会进入”任务队列”，等待主线程读取。<br>所谓”回调函数”（callback），就是那些会被主线程挂起来的代码，前面说的点击事件$(selectot).click(function)中的 function 就是一个回调函数。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。例如 ajax 的 success，complete，error 也都指定了各自的回调函数，这些函数就会加入“任务队列”中，等待执行。</p><h2 id="AJAX-请求数据过程"><a href="#AJAX-请求数据过程" class="headerlink" title="AJAX 请求数据过程"></a>AJAX 请求数据过程</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、准备一个ajax独对象</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>（<span class="built_in">window</span>.XMLHttpRequest）&#123;</span><br><span class="line"></span><br><span class="line">ajax = <span class="keyword">new</span> XMLHttpRequest()；</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">ajax = <span class="keyword">new</span> ActiveXObject（<span class="string">"Microsoft。XMLHTTP"</span>）</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、和服务器建立连接----通过open方法</span><br><span class="line"></span><br><span class="line">ajax.open(<span class="string">"get"</span>,<span class="string">"url"</span>,<span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line">第一个参数 : 请求方向;</span><br><span class="line"></span><br><span class="line">第二个参数 : 请求路径；</span><br><span class="line"></span><br><span class="line">第三个参数 : 同步/异步 <span class="literal">true</span> 表示异步</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、发送数据</span><br><span class="line"></span><br><span class="line">ajax。send（）;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、服务器相应数据 并将处理结果返回给客户端</span><br><span class="line"></span><br><span class="line">通过 onreadystatechange 事件相应服务器的数据</span><br><span class="line"></span><br><span class="line">根据 readState 判断数据</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器相应数据核实，并将处理的结果返回客户端</span></span><br><span class="line"></span><br><span class="line">ajax.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ajax.readyState==<span class="number">4</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ajax.status == <span class="number">200</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交易成功返回数据</span></span><br><span class="line"></span><br><span class="line">alert( ajax.responseText );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>计算机中的缓存 ： 是 CPU 和内存之前的一块存储区 容量小 交换数据速度快</p><p>浏览器中的缓存 ： 记录浏览的历史记录的数据</p><p>IE 浏览器容易出现缓存问题</p><p>解决办法 ： 更改 URL</p><p>ajax.open（”get”，（this.index+1)+”.txt?id=”+new Date().getTime(),true）;</p><p>ajax.open (“get”,(this.index+1)+”.txt?id=”+Math.random（）,true );</p><h2 id="AJAX-的-post-提交和-get-提交的区别"><a href="#AJAX-的-post-提交和-get-提交的区别" class="headerlink" title="AJAX 的 post 提交和 get 提交的区别"></a>AJAX 的 post 提交和 get 提交的区别</h2><p>post 方式需要设置请求头 请求头必须在 open 下面 注意顺序问题</p><p>ajax.setRequestHeader(“Content-Type”,”application/x-www-form-urlencoded”);</p><p>从服务器返回的数据永远都是字符串。</p><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>所谓的同源 就是指 ajax 在请求数据时， 保证 协议、域名、端口号 完全一致，才能够通过请求</p><p>同源策略是浏览器的一个行业标准，有了同源策略保证用户数据的安全性。</p><p>所有的 javascript 都要遵循这个同源策略的</p><p>ajax 不能实现跨域请求数据（受同源策略的影响不能实现跨域）12-07</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-AJAX？&quot;&gt;&lt;a href=&quot;#什么是-AJAX？&quot; class=&quot;headerlink&quot; title=&quot;什么是 AJAX？&quot;&gt;&lt;/a&gt;什么是 AJAX？&lt;/h2&gt;&lt;p&gt;AJAX = 异步 JavaScript 和 XML。&lt;/p&gt;
&lt;p&gt;AJAX 是一种用于创建快速动态网页的技术。&lt;/p&gt;
&lt;p&gt;通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。&lt;/p&gt;
&lt;p&gt;传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。&lt;/p&gt;
&lt;p&gt;有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图等。&lt;/p&gt;
&lt;h2 id=&quot;AJAX-的作用&quot;&gt;&lt;a href=&quot;#AJAX-的作用&quot; class=&quot;headerlink&quot; title=&quot;AJAX 的作用&quot;&gt;&lt;/a&gt;AJAX 的作用&lt;/h2&gt;&lt;p&gt;当向后台发送少量的数据时，通过 AJAX 的技术可以实现界面局部刷新，提高程序的运行效率。&lt;/p&gt;
&lt;p&gt;ajax 技术可以实现整个页面无刷新&lt;br&gt;&lt;img src=&quot;http://p1.pstatp.com/large/4af400003265167c138b&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;同步和异步的区别&quot;&gt;&lt;a href=&quot;#同步和异步的区别&quot; class=&quot;headerlink&quot; title=&quot;同步和异步的区别&quot;&gt;&lt;/a&gt;同步和异步的区别&lt;/h2&gt;&lt;p&gt;你应该知道，javascript 语言是一门“单线程”的语言，不像 java 语言，类继承 Thread 再来个 thread.start 就可以开辟一个线程，所以，javascript 就像一条流水线，仅仅是一条流水线而已，要么加工，要么包装，不能同时进行多个任务和流程。&lt;/p&gt;
&lt;p&gt;我个人觉得 js 官方的文档在使用两个词的时候并不准确，包括很多其他词汇，都只是听起来高深，但实际应用好像跟这些词没半毛钱关系。例如“事件委托”这个词，不知道的人乍一看谁又能说出“事件委托”是什么意思？委托什么事件？怎么个委托，我看不如干脆就叫“事件在外层元素中的捕获”，虽然长一点，一下就能看懂。&lt;/p&gt;
&lt;p&gt;其实同步和异步，无论如何，做事情的时候都是只有一条流水线（单线程），同步和异步的差别就在于这条流水线上各个流程的执行顺序不同。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://www.jonathon.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://www.jonathon.cn/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://www.jonathon.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 正则</title>
    <link href="https://www.jonathon.cn/js6.html"/>
    <id>https://www.jonathon.cn/js6.html</id>
    <published>2019-01-31T06:48:08.000Z</published>
    <updated>2019-01-31T07:07:49.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>作用： 前端往往会有大量的数据校验工作，可以通过正则表达式对象提高工作效率</p><h2 id="正则表达式定义"><a href="#正则表达式定义" class="headerlink" title="正则表达式定义"></a>正则表达式定义</h2><p>var reg = /表达式/修饰符;</p><p>正则表达是有 普通字符 和 特殊字符 组成的 ， 组成的这个正则表达式 就可以做一些校验工作</p><h2 id="正则表达式中的特殊字符"><a href="#正则表达式中的特殊字符" class="headerlink" title="正则表达式中的特殊字符"></a>正则表达式中的特殊字符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">^ : 表示正则表达式的开始</span><br><span class="line"></span><br><span class="line">$ : 表示正则表达式的结束</span><br><span class="line"></span><br><span class="line">- : 表示前面紧挨着的字符至少出现 1 次 没有上限 等价 &#123;1,&#125;</span><br><span class="line"></span><br><span class="line">? : 表示前面紧挨着的字符至少出现 0 次，至多出现 1 次 等价 &#123;0,1&#125;</span><br><span class="line"></span><br><span class="line">- : 表示前面紧挨着的字符至少出现 0 次 没有上限 等价&#123;0,&#125;</span><br><span class="line"></span><br><span class="line">. : 表示任意一个字符</span><br><span class="line"></span><br><span class="line">: 表示转义字符 . 表示 . \ 表示</span><br><span class="line"></span><br><span class="line">d : 表示 0-9 之间的任意一个数字 等价 [0-9]</span><br><span class="line"></span><br><span class="line">D : 表示非数字 （表示除了 0-9 之间的任意一个字符） 等价 [^0-9]</span><br><span class="line"></span><br><span class="line">w : 表示一个单词字符（字母、数字、下划线中的任意一个） 等价 [a-zA-Z0-9_]</span><br><span class="line"></span><br><span class="line">W : 表示一个非单词字符</span><br><span class="line"></span><br><span class="line">s : 表示空白字符（空格、tab）</span><br><span class="line"></span><br><span class="line">S : 非空白字符</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">m,n&#125;这里的m和n为正整数 m&lt;n 表示括号前面紧挨着的字符至少出现m次 至多出现n次</span><br><span class="line"></span><br><span class="line">&#123;m&#125; 这里的m表示正整数 表示括号前面紧挨着的字符只能出现m次</span><br><span class="line"></span><br><span class="line">&#123;m,&#125; 表示括号前面紧挨着的字符至少出现m次 （没有上限）</span><br><span class="line"></span><br><span class="line">[] 表示括号内的任意一个字符</span><br><span class="line"></span><br><span class="line">[<span class="number">123</span>abc] 代表<span class="number">123</span>abc中的任意一个字符</span><br><span class="line"></span><br><span class="line">[a-z] 表示a-z中的任意一个字符</span><br><span class="line"></span><br><span class="line">[a-zA-Z] 表示任意一个字母</span><br><span class="line"></span><br><span class="line">[^ ] 表示非 括号内的任意一个字符</span><br><span class="line"></span><br><span class="line">( ) 优先级最高 一般和 | 连用</span><br><span class="line"></span><br><span class="line">| 表示或者</span><br><span class="line"></span><br><span class="line">[\u4e00-\u9fa5] 表示任意一个中文字符</span><br><span class="line"></span><br><span class="line">[\u2e80-\u9fff] unicode 字符集</span><br><span class="line"></span><br><span class="line">修饰符：</span><br><span class="line"></span><br><span class="line">i 不区分大小写</span><br><span class="line"></span><br><span class="line">g 全局查找</span><br><span class="line"></span><br><span class="line">m 多行查找</span><br></pre></td></tr></table></figure><h2 id="正则表达式的方法"><a href="#正则表达式的方法" class="headerlink" title="正则表达式的方法"></a>正则表达式的方法</h2><h3 id="test-方法"><a href="#test-方法" class="headerlink" title="test() 方法 :"></a>test() 方法 :</h3><p>根据正则表达式规范判断某个字符串是否符合该正则规范，返回一个布尔值</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg.test(str);</span><br></pre></td></tr></table></figure><h3 id="exec-方法"><a href="#exec-方法" class="headerlink" title="exec() 方法 :"></a>exec() 方法 :</h3><p>用正则表达式在字符串中查找，返回包含该查找结果的一个数组</p><p>返回的数组长度为 1</p><p>如果查找不到 返回 null</p><p>用法：</p><p>reg.exec(str) ;</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"How old are you?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]+/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找字符串中 包含 1 个以上的小写字母</span></span><br><span class="line"></span><br><span class="line">alert(reg.exec(str));</span><br></pre></td></tr></table></figure><h3 id="match-方法-："><a href="#match-方法-：" class="headerlink" title="match() 方法 ："></a>match() 方法 ：</h3><p>使用正则表达式对字符串查找，并将包含的结果作为数组返回。如果 match()没找到匹配，返回 null.</p><p>用法：</p><p>str.match(reg) 参数是一个正则对象</p><p>说明：</p><p>查找时，如果正则表达式有修饰符 g， 根据正则全局匹配查找</p><p>查找时，如果正则表达式没有修饰符 g， 先根据正则表达式查找一次，返回一个数组，数组后面的其他值是根据正则表达式中的子表达式匹配查找的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"How Old Are You?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]+/ig</span>;</span><br><span class="line"></span><br><span class="line">alert( str.match(reg) );<span class="comment">//使用 reg 规范 查找 str ，满足条件 返回一个数组</span></span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/&lt;.+&gt;(.\*)&lt;/</span>.+&gt;<span class="regexp">/;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var str = "&lt;p&gt;sssss&lt;/</span>p&gt;<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">alert( str.match(reg) );</span></span><br></pre></td></tr></table></figure><h3 id="search-方法-："><a href="#search-方法-：" class="headerlink" title="search()方法 ："></a>search()方法 ：</h3><p>返回与正则表达式匹配的第一个子字符串的位置，如果找到匹配项，返回一个整数，如果没找到，则返回-1。这个用法类似 indexOf()方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">用法：</span><br><span class="line"></span><br><span class="line">str.search(reg);</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123 how are you?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-z]+/</span>;</span><br><span class="line"></span><br><span class="line">alert( str.search(reg) );</span><br></pre></td></tr></table></figure><h3 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace() 方法 :"></a>replace() 方法 :</h3><p>通过正则表达式替换，返回结果 是原字符串被替换后的新字符串</p><p>用法： str.replace(正则表达式,要替换的新字符串)</p><p>如果想实现全局替换，在正则表达式上加一个修饰符 g</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"good good study,day day up!!!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符串中的good 替换成 best</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg =<span class="regexp">/good/g</span>;</span><br><span class="line"></span><br><span class="line">alert( str.replace(reg,<span class="string">"best"</span>) )</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h2&gt;&lt;p&gt;作用： 前端往往会有大量的数据校验工作，可以通过正则表达式对象提高工作效率&lt;/p&gt;
&lt;h2 id=&quot;正则表达式定义&quot;&gt;&lt;a href=&quot;#正则表达式定义&quot; class=&quot;headerlink&quot; title=&quot;正则表达式定义&quot;&gt;&lt;/a&gt;正则表达式定义&lt;/h2&gt;&lt;p&gt;var reg = /表达式/修饰符;&lt;/p&gt;
&lt;p&gt;正则表达是有 普通字符 和 特殊字符 组成的 ， 组成的这个正则表达式 就可以做一些校验工作&lt;/p&gt;
&lt;h2 id=&quot;正则表达式中的特殊字符&quot;&gt;&lt;a href=&quot;#正则表达式中的特殊字符&quot; class=&quot;headerlink&quot; title=&quot;正则表达式中的特殊字符&quot;&gt;&lt;/a&gt;正则表达式中的特殊字符&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;^ : 表示正则表达式的开始&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ : 表示正则表达式的结束&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- : 表示前面紧挨着的字符至少出现 1 次 没有上限 等价 &amp;#123;1,&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;? : 表示前面紧挨着的字符至少出现 0 次，至多出现 1 次 等价 &amp;#123;0,1&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- : 表示前面紧挨着的字符至少出现 0 次 没有上限 等价&amp;#123;0,&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;. : 表示任意一个字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;: 表示转义字符 . 表示 . \ 表示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d : 表示 0-9 之间的任意一个数字 等价 [0-9]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D : 表示非数字 （表示除了 0-9 之间的任意一个字符） 等价 [^0-9]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;w : 表示一个单词字符（字母、数字、下划线中的任意一个） 等价 [a-zA-Z0-9_]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;W : 表示一个非单词字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s : 表示空白字符（空格、tab）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S : 非空白字符&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://www.jonathon.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://www.jonathon.cn/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://www.jonathon.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Javascript Cookie</title>
    <link href="https://www.jonathon.cn/js5.html"/>
    <id>https://www.jonathon.cn/js5.html</id>
    <published>2019-01-31T06:34:52.000Z</published>
    <updated>2019-01-31T06:46:32.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="客户端和服务器"><a href="#客户端和服务器" class="headerlink" title="客户端和服务器"></a>客户端和服务器</h2><p>客户端：一台电脑，为用户提供服务</p><p>服务器：安装了特定服务软件的一台电脑</p><p>java php .net 服务器语言</p><p>Tomcat apache iis 服务器软件</p><p>客户端和服务端的工作流程：</p><p><img src="http://p1.pstatp.com/large/4add0004b35de8e90725"></p><h2 id="会话跟踪技术"><a href="#会话跟踪技术" class="headerlink" title="会话跟踪技术"></a>会话跟踪技术</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户端请求数据，服务器端根据客户端请求的数据并将数据解析返回的这样一个过程;称为一个会话。</span><br></pre></td></tr></table></figure><p>会话跟踪技术 就是 cookie</p><p>从客户端向服务器端发送一些数据 ， 部分数据可以通过 cookie 存储 ， cookie 就是用来存储数据的</p><p>通过 cookie 可以存储会话过程中的状态和信息<br><img src="http://p3.pstatp.com/large/4add0004b4270ca8e9a8"></p><a id="more"></a><h2 id="cookie-的存和取"><a href="#cookie-的存和取" class="headerlink" title="cookie 的存和取"></a>cookie 的存和取</h2><p>存： document.cookie = “键=值”</p><p>取： document.cookie</p><h2 id="cookie-的生存期"><a href="#cookie-的生存期" class="headerlink" title="cookie 的生存期"></a>cookie 的生存期</h2><p>生存期：cookie 信息在浏览器中生存时间</p><p>设置生存期：</p><p>document.cookie = “键=值;expires=标准时间格式”;</p><p>生存期说明：</p><p>1、如果不设置生存期，浏览器关闭，cookie 信息自动消失</p><p>2、如果设置生存期，cookie 信息会在生存期规定时间后自动消失。</p><p>3、如果通过更改系统时间的方式删除 cookie，这种删除方式为假删除 ， 系统时间恢复后，cookie 信息自动恢复</p><p>4、如果要删除 cookie， 可以将 cookie 的值设置为””, 或将 cookie 的生存期改为 -1</p><h2 id="对象类型和字符串类型之间转换"><a href="#对象类型和字符串类型之间转换" class="headerlink" title="对象类型和字符串类型之间转换"></a>对象类型和字符串类型之间转换</h2><p>JSON.stringify( 对象 ) 将对象类型转成字符串</p><p>JSON.parse( 字符串 ) 将字符串转成对象 这里的字符串要求： 去掉引号后就是一个对象</p><p>例如： “[1,2,3,4,5]” 可以正常转换 ‘{“name”:”admin”}’ 可以</p><p>“hello” 不可以正常转换</p><p>cookie 存的数据类型是字符串</p><p>document.cookie 取出来的数据一定是字符串</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;客户端和服务器&quot;&gt;&lt;a href=&quot;#客户端和服务器&quot; class=&quot;headerlink&quot; title=&quot;客户端和服务器&quot;&gt;&lt;/a&gt;客户端和服务器&lt;/h2&gt;&lt;p&gt;客户端：一台电脑，为用户提供服务&lt;/p&gt;
&lt;p&gt;服务器：安装了特定服务软件的一台电脑&lt;/p&gt;
&lt;p&gt;java php .net 服务器语言&lt;/p&gt;
&lt;p&gt;Tomcat apache iis 服务器软件&lt;/p&gt;
&lt;p&gt;客户端和服务端的工作流程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.pstatp.com/large/4add0004b35de8e90725&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;会话跟踪技术&quot;&gt;&lt;a href=&quot;#会话跟踪技术&quot; class=&quot;headerlink&quot; title=&quot;会话跟踪技术&quot;&gt;&lt;/a&gt;会话跟踪技术&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;客户端请求数据，服务器端根据客户端请求的数据并将数据解析返回的这样一个过程;称为一个会话。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会话跟踪技术 就是 cookie&lt;/p&gt;
&lt;p&gt;从客户端向服务器端发送一些数据 ， 部分数据可以通过 cookie 存储 ， cookie 就是用来存储数据的&lt;/p&gt;
&lt;p&gt;通过 cookie 可以存储会话过程中的状态和信息&lt;br&gt;&lt;img src=&quot;http://p3.pstatp.com/large/4add0004b4270ca8e9a8&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://www.jonathon.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://www.jonathon.cn/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://www.jonathon.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Javascript事件流</title>
    <link href="https://www.jonathon.cn/js4.html"/>
    <id>https://www.jonathon.cn/js4.html</id>
    <published>2019-01-31T05:43:12.000Z</published>
    <updated>2019-01-31T06:46:32.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p><img src="http://p99.pstatp.com/large/4711000441cc4ea237bb"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">当触发某个事件时（某个事件发生了），从子元素向父级元素触发 或 从父级元素向子元素触发的过程 ，这个过程 称为事件流</span><br><span class="line"></span><br><span class="line">事件流有两种模式：</span><br><span class="line"></span><br><span class="line">事件冒泡：从子元素向父级元素触发 small --- big ---body --- document -- window</span><br><span class="line"></span><br><span class="line">事件捕获：从父级元素向子元素触发 window --- document --- body --- big --- small</span><br></pre></td></tr></table></figure><p><img src="http://p1.pstatp.com/large/4ad70002b362ba3ccd37"><br><a id="more"></a></p><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>当子元素触发某个事件时，同样的事件回向父级元素触发，这个过程称之为事件冒泡</p><h2 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h2><p>兼容写法：<br>e.stopPropagation?e.stopPropagation():e.cancelBubble=true;</p><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>事件绑定： 如何为元素添加一个事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、在标签上写事件名称 &lt;input onclick = &quot;fun()&quot;&gt;</span><br><span class="line"></span><br><span class="line">2、通过 对象.事件 = function()&#123; .... &#125; ,写在 script 标签内部的</span><br><span class="line"></span><br><span class="line">3、同过 addEventListener() 方法</span><br></pre></td></tr></table></figure><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p>通过 addEventListener 方法为元素添加事件 称为事件的监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">事件监听好处：</span><br><span class="line"></span><br><span class="line">可以为同一个元素添加多个同样事件</span><br><span class="line"></span><br><span class="line">为同一个元素添加多个同样事件时，执行顺序从上到下顺序执行。</span><br><span class="line"></span><br><span class="line">事件监听用法：</span><br><span class="line"></span><br><span class="line">对象.addEventListener(&quot;事件&quot;,function()&#123;&#125;,true/false) --- 高版本浏览器</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">第一个参数： 监听的事件 这里的事件没有on</span><br><span class="line"></span><br><span class="line">第二个参数： 事件处理程序</span><br><span class="line"></span><br><span class="line">第三个参数： 是一个布尔值 true表示 事件的捕获 false 表示事件的冒泡 （默认是false）</span><br><span class="line"></span><br><span class="line">对象.attachEvent(&quot;事件&quot;,事件处理程序) ---- 低版本浏览器</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line">第一个参数： 监听的事件 这里的事件有on</span><br><span class="line"></span><br><span class="line">第二个参数： 事件处理程序</span><br></pre></td></tr></table></figure><h2 id="冒泡和捕获的执行顺序"><a href="#冒泡和捕获的执行顺序" class="headerlink" title="冒泡和捕获的执行顺序"></a>冒泡和捕获的执行顺序</h2><p>当同一个元素既有事件冒泡和事件捕获时，先执行捕获 ; 后执行冒泡<br><img src="http://p9.pstatp.com/large/4ada0000956929660f25"></p><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>委托：让别人去做</p><p>事件委托：把某个事件委托给别人去做</p><p>委托的好处：</p><p>当某些元素具有同样的事件时，为了提高程序的执行效率，可以把这些元素的事件加到他们的父级元素上。</p><p>委托实现方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、 父级元素.事件 = function()&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">2、 通过事件监听方法 addEventListener 实现</span><br><span class="line"></span><br><span class="line">父级元素.addEventListener(&quot;事件&quot;,function()&#123; .... &#125;)</span><br><span class="line"></span><br><span class="line">委托实现时，获取事件源的属性： e.target || e.srcElement</span><br><span class="line"></span><br><span class="line">委托实现原理： 利用事件冒泡的机制，将某些元素的事件添加到父级元素上</span><br><span class="line"></span><br><span class="line">委托对事件的限制： 不是所有的事件都可以实现委托，例如下面的事件一般不需要委托 （onclick一般用委托实现的比较多）</span><br><span class="line"></span><br><span class="line">onload onfocus onblur ....</span><br></pre></td></tr></table></figure><h2 id="注意的问题"><a href="#注意的问题" class="headerlink" title="注意的问题"></a>注意的问题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">button 标签 在 form 中相当于 submit 按钮，会刷新页面</span><br><span class="line"></span><br><span class="line">&lt;a href =<span class="string">"#"</span>&gt;超链接&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">阻止超链接的跳转功能</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;a href ="javascript:;"&gt;超链接&lt;/</span>a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href =<span class="string">"javascript:void(0);"</span>&gt;超链接&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><h2 id="json-对象"><a href="#json-对象" class="headerlink" title="json 对象"></a>json 对象</h2><p>json 全称：javascript object notation</p><p>中文含义： javascript 对象表示法</p><p>定义：json 是一种轻量级的数据交换对象</p><p>作用： 存储数据</p><p>json 对象定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> j = &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#123;&#125; 里面数据的组成格式： 键值对 ， 键和值之间用冒号，每一个键值对之间用 逗号 间隔， 所有的键必须用 双引号引起来。</span><br><span class="line"></span><br><span class="line">键对应的值 可以是任意类型</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> j = &#123; <span class="string">"name"</span>: <span class="string">"小明"</span> , <span class="string">"age"</span>:<span class="number">18</span> , <span class="string">"tel"</span>:<span class="string">"13999999999"</span> &#125;</span><br><span class="line"></span><br><span class="line">json 对象的操作：</span><br><span class="line"></span><br><span class="line">赋值：</span><br><span class="line"></span><br><span class="line">定义时直接赋值</span><br><span class="line"></span><br><span class="line">动态为 json 对象赋值 j.addr = <span class="string">"beijing"</span>;</span><br><span class="line"></span><br><span class="line">取值：</span><br><span class="line"></span><br><span class="line">json 对象.键名</span><br><span class="line"></span><br><span class="line">json 对象[<span class="string">"键名"</span>]</span><br><span class="line"></span><br><span class="line">json 对象的遍历 ： <span class="keyword">for</span>...in</span><br></pre></td></tr></table></figure><h2 id="offset-家族"><a href="#offset-家族" class="headerlink" title="offset 家族"></a>offset 家族</h2><p>获取元素的宽和高：</p><p>offsetWidth / offsetHeight 获取的宽度为：内容宽度　＋　补白　＋　边框</p><p>clientWidth / clientHeight 获取的宽度为：内容宽度　＋　补白</p><p>对象.style.width 和 offsetWidth 区别：</p><p>1、前者获取的宽度 为内容的的宽度（不包括补白和边框） ， 后者获取的宽度为 内容宽度 + 补白 + 边框</p><p>2、前者获取的结果类型 为 string 后者获取的类型为 number ，可以直接操作</p><p>3、前者可读可写 后者只可读不可写（只能获取结果不能设置结果）</p><p>4、前者只能获取行内样式值（带有 px 值） 后者可以获取行内值也可以获取内嵌样式值</p><p>获取元素偏移量：</p><p>offsetLeft ： 获取距离上一级中（离他最近）具有定位的元素的左偏移，这里的上一级可能是父元素，也可能是上上一级爷爷元素，也可能是曾爷爷….</p><p>offsetTop : 获取上偏移（含义同上） 如果上一级中所有元素都没有定位，默认相对 body 的左偏移</p><h2 id="Js-实现拖拽效果"><a href="#Js-实现拖拽效果" class="headerlink" title="Js 实现拖拽效果"></a>Js 实现拖拽效果</h2><p>1、要想实现拖拽效果，首先要有鼠标按下事件</p><p>鼠标按下时，需要记录 鼠标按下时相对于移动盒子的偏移量</p><p>rex = e.offsetX || e.layerX</p><p>rey = e.offsetY || e.layerY</p><p>2、鼠标拖拽盒子在文档上移动，需要给文档添加一个 鼠标移动事件</p><p>document.onmousemove = function(){….}</p><p>3、如果要停止拖拽，鼠标抬起时需要取消文档的移动事件</p><p>document.onmouseup = function(){</p><p>//取消文档的移动事件</p><p>document.onmouesmove = null;</p><p>}</p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">box.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  rex = e.offsetX;</span><br><span class="line"></span><br><span class="line">  rey = e.offsetY;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    box.style.left = e.pageX - rex;</span><br><span class="line"></span><br><span class="line">    box.style.top = e.pageY - rey;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.onmouesmove = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>获取窗口的宽度和高度：</p><p>window.innerWidth / window.innerHeight</p><p>window.outerWidth / window.outerHeight(包含浏览器的工具条高度)</p><h2 id="取消拖拽时文字的选中状态"><a href="#取消拖拽时文字的选中状态" class="headerlink" title="取消拖拽时文字的选中状态"></a>取消拖拽时文字的选中状态</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.getSelection</span><br><span class="line">  ? <span class="built_in">window</span>.getSelection().removeAllRanges()</span><br><span class="line">  : <span class="built_in">document</span>.selection.empty();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;事件流&quot;&gt;&lt;a href=&quot;#事件流&quot; class=&quot;headerlink&quot; title=&quot;事件流&quot;&gt;&lt;/a&gt;事件流&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://p99.pstatp.com/large/4711000441cc4ea237bb&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;当触发某个事件时（某个事件发生了），从子元素向父级元素触发 或 从父级元素向子元素触发的过程 ，这个过程 称为事件流&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;事件流有两种模式：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;事件冒泡：从子元素向父级元素触发 small --- big ---body --- document -- window&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;事件捕获：从父级元素向子元素触发 window --- document --- body --- big --- small&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://p1.pstatp.com/large/4ad70002b362ba3ccd37&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://www.jonathon.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://www.jonathon.cn/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://www.jonathon.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavascriptDom</title>
    <link href="https://www.jonathon.cn/js3.html"/>
    <id>https://www.jonathon.cn/js3.html</id>
    <published>2018-12-06T07:22:19.000Z</published>
    <updated>2019-01-31T06:46:32.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="节点克隆"><a href="#节点克隆" class="headerlink" title="节点克隆"></a>节点克隆</h2><p>cloneNode()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用法：</span><br><span class="line"></span><br><span class="line">对象.cloneNode([<span class="literal">true</span>]); <span class="literal">true</span>表示可有可无</span><br><span class="line"></span><br><span class="line">如果含有参数<span class="literal">true</span>，表示深度克隆，即克隆该对象本身，又克隆该对象的内容</span><br><span class="line"></span><br><span class="line">如果没有参数<span class="literal">true</span>，只克隆该对象本身</span><br></pre></td></tr></table></figure></p><h2 id="dom中的属性操作方法"><a href="#dom中的属性操作方法" class="headerlink" title="dom中的属性操作方法"></a>dom中的属性操作方法</h2><p>1、获取属性值</p><p>对象.getAttribute(“属性名”) 获取属性值 ，可以获取标签的固有属性值，也可以获取自定义属性值 （该方法不能操作 单选框或复选框的checked值）</p><p>2、设置属性值</p><p>对象.setAttribute(“属性名”,”值”);</p><p>3、移出某个对象的属性</p><p>对象.removeAttribute(“属性名”);<br><a id="more"></a></p><h2 id="事件对象（event）"><a href="#事件对象（event）" class="headerlink" title="事件对象（event）"></a>事件对象（event）</h2><p>什么是事件对象：当触发某个事件时（onclick、onmouseover…）,会产生一个对象，这个对象就是事件对象。</p><h2 id="获取事件对象的兼容写法"><a href="#获取事件对象的兼容写法" class="headerlink" title="获取事件对象的兼容写法"></a>获取事件对象的兼容写法</h2><p>var e = evt || window.event;  此时 e 变量 代表了事件对象</p><h2 id="事件对象作用"><a href="#事件对象作用" class="headerlink" title="事件对象作用"></a>事件对象作用</h2><p>获取键盘状态，鼠标位置和鼠标按钮状态。</p><p>不同的事件产生的事件对象 可能会有不同的属性</p><h2 id="获取坐标问题"><a href="#获取坐标问题" class="headerlink" title="获取坐标问题"></a>获取坐标问题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">clientX / clientY 获取距离浏览器窗口 左侧 和 定部的距离 （即使滚动条将内容区向上移动，永远获取的是距离浏览器窗口距离）</span><br><span class="line"></span><br><span class="line">pageX / pageY 获取距离页面内容区域的左侧和顶部的距离 （如果滚动条没有触发，值和clientY相等）</span><br><span class="line"></span><br><span class="line">offsetX / offsetY 获取的是距离某个元素内部的 左偏移 和 上偏移（火狐不兼容）</span><br><span class="line"></span><br><span class="line">screenX / screenY 获取距离屏幕的左偏移和上偏移</span><br><span class="line"></span><br><span class="line">layerX / layerY （火狐浏览器识别 ： 结果同 offsetX 和 offsetY）</span><br></pre></td></tr></table></figure><h2 id="阻止浏览器右键单击的默认行为"><a href="#阻止浏览器右键单击的默认行为" class="headerlink" title="阻止浏览器右键单击的默认行为"></a>阻止浏览器右键单击的默认行为</h2><p>右键单击事件：oncontextmenu</p><p>e.preventDefault ? e.preventDefault() : e.returnValue = false;</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;节点克隆&quot;&gt;&lt;a href=&quot;#节点克隆&quot; class=&quot;headerlink&quot; title=&quot;节点克隆&quot;&gt;&lt;/a&gt;节点克隆&lt;/h2&gt;&lt;p&gt;cloneNode()&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;用法：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对象.cloneNode([&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;]); &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;表示可有可无&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果含有参数&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;，表示深度克隆，即克隆该对象本身，又克隆该对象的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果没有参数&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;，只克隆该对象本身&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;dom中的属性操作方法&quot;&gt;&lt;a href=&quot;#dom中的属性操作方法&quot; class=&quot;headerlink&quot; title=&quot;dom中的属性操作方法&quot;&gt;&lt;/a&gt;dom中的属性操作方法&lt;/h2&gt;&lt;p&gt;1、获取属性值&lt;/p&gt;
&lt;p&gt;对象.getAttribute(“属性名”) 获取属性值 ，可以获取标签的固有属性值，也可以获取自定义属性值 （该方法不能操作 单选框或复选框的checked值）&lt;/p&gt;
&lt;p&gt;2、设置属性值&lt;/p&gt;
&lt;p&gt;对象.setAttribute(“属性名”,”值”);&lt;/p&gt;
&lt;p&gt;3、移出某个对象的属性&lt;/p&gt;
&lt;p&gt;对象.removeAttribute(“属性名”);&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://www.jonathon.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://www.jonathon.cn/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://www.jonathon.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavascriptDom</title>
    <link href="https://www.jonathon.cn/js2.html"/>
    <id>https://www.jonathon.cn/js2.html</id>
    <published>2018-11-21T02:26:55.000Z</published>
    <updated>2019-01-31T06:46:32.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dom—document-，objec，model-（文档对象模型）"><a href="#dom—document-，objec，model-（文档对象模型）" class="headerlink" title="dom—document ，objec，model （文档对象模型）"></a>dom—document ，objec，model （文档对象模型）</h2><p><img src="http://p99.pstatp.com/large/4711000441cc4ea237bb"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">html元素是根节点</span><br><span class="line"></span><br><span class="line">所有的 html 元素都称为 元素节点</span><br><span class="line"></span><br><span class="line">所有元素节点的内容称为 文本节点（内容部分）</span><br><span class="line"></span><br><span class="line">所有的元素节点的属性 称为 属性节点</span><br><span class="line"></span><br><span class="line">一切都是节点</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="节点关系（查找-html-元素）"><a href="#节点关系（查找-html-元素）" class="headerlink" title="节点关系（查找 html 元素）"></a>节点关系（查找 html 元素）</h2><p>父节点： parentNode</p><p>兄弟节点：</p><p>previousElementSibling 前一个兄弟节点 – 高版本浏览器 previousSibling — 低版本浏览器 （后面所有的同理）</p><p>nextElementSibling 后一个兄弟节点 nextSibling</p><p>孩子节点：</p><p>firstElementChild 第一个孩子节点 firstChild</p><p>lastElementChild 最后一个孩子节点 lastChild</p><p>childNodes 孩子节点 得到是一个集合 使用时要用下标</p><p>children 孩子节点 得到一个集合 使用是要用下标</p><p>children 和 childNodes 区别：</p><p>children 操作的节点就是 元素节点</p><p>childNodes 会将标签后的回车作为 自己的 文本节点来操作</p><h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">元素节点 nodeType 值为 1</span><br><span class="line"></span><br><span class="line">文本节点 nodeType 值为 3</span><br><span class="line"></span><br><span class="line">属性节点 nodeType 值为 2</span><br><span class="line"></span><br><span class="line">nodeType 节点类型</span><br><span class="line"></span><br><span class="line">nodeName 节点名 （tagName 获取标签名）</span><br><span class="line"></span><br><span class="line">nodeValue 节点值</span><br></pre></td></tr></table></figure><h2 id="节点动态操作（创建、-添加、删除）"><a href="#节点动态操作（创建、-添加、删除）" class="headerlink" title="节点动态操作（创建、 添加、删除）"></a>节点动态操作（创建、 添加、删除）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1、创建一个新元素节点</span><br><span class="line"></span><br><span class="line">document.createElement(&quot;节点名称&quot;);</span><br><span class="line"></span><br><span class="line">2、添加创建的节点 appendChild()</span><br><span class="line"></span><br><span class="line">父元素.appendChild(要添加的子元素)</span><br><span class="line"></span><br><span class="line">3、创建一个文本节点</span><br><span class="line"></span><br><span class="line">document.createTextNode(&quot;文本&quot;);</span><br><span class="line"></span><br><span class="line">4、删除创建的元素 removeChild</span><br><span class="line"></span><br><span class="line">父元素.removeChild( 要删除的子元素 );</span><br><span class="line"></span><br><span class="line">5、添加创建的节点 insertBefore</span><br><span class="line"></span><br><span class="line">父元素.insertBefore( 要添加的子元素,参照节点 );</span><br><span class="line"></span><br><span class="line">向父元素的内容参照节点的前面添加一个新元素</span><br><span class="line"></span><br><span class="line">注意：参数一定要写满两个，参照节点这个参数可以为null，如果参数为null，效果同appendChild</span><br></pre></td></tr></table></figure><h2 id="关于动态创建的元素添加事件问题"><a href="#关于动态创建的元素添加事件问题" class="headerlink" title="关于动态创建的元素添加事件问题"></a>关于动态创建的元素添加事件问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果要给一个动态创建的元素添加事件，添加事件的代码必须和动态创建的代码在一个函数体内。如果写在函数体外部，需要用委托来实现。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;dom—document-，objec，model-（文档对象模型）&quot;&gt;&lt;a href=&quot;#dom—document-，objec，model-（文档对象模型）&quot; class=&quot;headerlink&quot; title=&quot;dom—document ，objec，model （文档对象模型）&quot;&gt;&lt;/a&gt;dom—document ，objec，model （文档对象模型）&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://p99.pstatp.com/large/4711000441cc4ea237bb&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;html元素是根节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;所有的 html 元素都称为 元素节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;所有元素节点的内容称为 文本节点（内容部分）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;所有的元素节点的属性 称为 属性节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一切都是节点&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://www.jonathon.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://www.jonathon.cn/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://www.jonathon.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Javascript函数</title>
    <link href="https://www.jonathon.cn/js1.html"/>
    <id>https://www.jonathon.cn/js1.html</id>
    <published>2018-11-10T07:05:25.000Z</published>
    <updated>2018-11-17T06:50:04.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、函数的概念"><a href="#1、函数的概念" class="headerlink" title="1、函数的概念"></a>1、函数的概念</h2><p>函数的概念：函数就是一个工具，也就是具有某个特定功能的一小段代码块</p><h2 id="2、函数定义"><a href="#2、函数定义" class="headerlink" title="2、函数定义"></a>2、函数定义</h2><h3 id="方式一：-函数调用可以在任意位置"><a href="#方式一：-函数调用可以在任意位置" class="headerlink" title="方式一： 函数调用可以在任意位置"></a>方式一： 函数调用可以在任意位置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line">  函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二：表达式定义—先定义，后调用，函数的调用一定是在定义后"><a href="#方式二：表达式定义—先定义，后调用，函数的调用一定是在定义后" class="headerlink" title="方式二：表达式定义—先定义，后调用，函数的调用一定是在定义后"></a>方式二：表达式定义—先定义，后调用，函数的调用一定是在定义后</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  函数体;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3、函数的调用"><a href="#3、函数的调用" class="headerlink" title="3、函数的调用"></a>3、函数的调用</h2><p>函数名([参数]);</p><p>函数的调用还可以通过事件来调用</p><h2 id="4、函数和事件的关系"><a href="#4、函数和事件的关系" class="headerlink" title="4、函数和事件的关系"></a>4、函数和事件的关系</h2><p>所有的事件都会依赖与某个函数来执行</p><a id="more"></a><h2 id="5、js-中的事件三要素"><a href="#5、js-中的事件三要素" class="headerlink" title="5、js 中的事件三要素"></a>5、js 中的事件三要素</h2><p>事件源 ： 一般是一个名词 开关</p><p>事件 ： 一般是一个动作，动词 按下</p><p>事件处理程序 ： 函数的功能</p><h2 id="6、js-中的常用事件"><a href="#6、js-中的常用事件" class="headerlink" title="6、js 中的常用事件"></a>6、js 中的常用事件</h2><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>onclick 单击</p><p>ondblclick 双击</p><p>onmouseover 鼠标划过</p><p>onmouseout 鼠标离开</p><p>onmousemove 鼠标离开</p><p>onmouseenter 鼠标划过</p><p>onmouseleave 鼠标离开</p><p>onmouseup 鼠标抬起</p><p>onmousedown 按下</p><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>onkeyup 键盘抬起</p><p>onkeydown 键盘按下</p><p>onkeypress 按下 + 抬起</p><h3 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h3><p>onload 页面加载 （页面打开）</p><p>onload 会在页面中的所有元素（img、标签、css，js….）都加载完成后再执行事件中的代码</p><p>onload 事件 在页面中只能有一个，如果有多个，后面的会将前面的覆盖</p><h3 id="其它事件（表单）"><a href="#其它事件（表单）" class="headerlink" title="其它事件（表单）"></a>其它事件（表单）</h3><p>onfocus 获取焦点</p><p>onblur 失去焦点</p><p>onchange 改变事件</p><p>onsubmit 表单提交事件</p><h2 id="7、事件用法"><a href="#7、事件用法" class="headerlink" title="7、事件用法"></a>7、事件用法</h2><p>1、 将事件写到标签内部 – 执行某个事件时直接调用函数</p><p>2、 找到某个元素.事件 = function(){ … } 事件源.事件 = 事件处理程序</p><p>通过 id 方式找到要操作的元素：</p><p>document.getElementById(“id 名”)</p><h2 id="8、通过-js-操作元素的样式、属性、内容"><a href="#8、通过-js-操作元素的样式、属性、内容" class="headerlink" title="8、通过 js 操作元素的样式、属性、内容"></a>8、通过 js 操作元素的样式、属性、内容</h2><h3 id="操作样式：obj-表示要操作的标签元素"><a href="#操作样式：obj-表示要操作的标签元素" class="headerlink" title="操作样式：obj 表示要操作的标签元素"></a>操作样式：obj 表示要操作的标签元素</h3><p>obj.style.样式名称 = “值” 样式名写法：小驼峰 fontSize backgroundColor</p><h3 id="属性操作："><a href="#属性操作：" class="headerlink" title="属性操作："></a>属性操作：</h3><p>obj.属性名 = “值” 操作图片的路径： oImg.src = “”</p><h3 id="内容操作："><a href="#内容操作：" class="headerlink" title="内容操作："></a>内容操作：</h3><p>操作表单的内容： obj.value = “值”</p><p>操作普通标签内容： obj.innerHTML = “值”</p><h3 id="this-指向的是事件的触发者"><a href="#this-指向的是事件的触发者" class="headerlink" title="this 指向的是事件的触发者"></a>this 指向的是事件的触发者</h3><p>小明.say = function(){</p><p>this is 小明……</p><p>}</p><h2 id="9、函数的参数"><a href="#9、函数的参数" class="headerlink" title="9、函数的参数"></a>9、函数的参数</h2><h3 id="形式参数（形参）"><a href="#形式参数（形参）" class="headerlink" title="形式参数（形参）"></a>形式参数（形参）</h3><p>形参一般出现在函数定义中</p><p>形参一般是一个变量</p><h3 id="实际参数（实参）"><a href="#实际参数（实参）" class="headerlink" title="实际参数（实参）"></a>实际参数（实参）</h3><p>实参一般出现在函数调用中</p><p>实参可以是变量，常量、表达式，但要求一定要有值</p><p>参数的传递是 将实参传递给形参，传递时一一对应</p><p>当实参的个数大于形参个数时，多余的实参自动舍去</p><p>当形参的个数大于实参个数时，多余的形参值为 undefined</p><h2 id="10、函数的种类"><a href="#10、函数的种类" class="headerlink" title="10、函数的种类"></a>10、函数的种类</h2><p>一般函数分为 系统函数 和 自定义函数</p><p>系统函数： alert() prompt() …….</p><h2 id="11、函数的返回值"><a href="#11、函数的返回值" class="headerlink" title="11、函数的返回值"></a>11、函数的返回值</h2><p>如果一个函数的结果 有其它用途时，可以将这个函数的结果返回</p><p>通过 return 返回函数的结果</p><p>一个函数可以没有返回值</p><p>如果函数有返回值，只能有一个</p><p>一个函数 遇到 return，return 后面的代码不会执行</p><h2 id="12、函数中的实参副本"><a href="#12、函数中的实参副本" class="headerlink" title="12、函数中的实参副本"></a>12、函数中的实参副本</h2><p>arguments</p><p>说明：</p><p>1、arguments 只能在函数体内部使用</p><p>2、arguments 代表的是所有的实参，和形参没有关系</p><p>3、arguments 是一个对象，而不是一个数组</p><p>4、arguments 使用时类似数组的方式 arguments[下标]，下标从 0 开始</p><p>5、arguments.length 可以获取实参的个数 通过 函数名.length 获取是形参个数</p><h2 id="13、变量的作用域（作用范围）"><a href="#13、变量的作用域（作用范围）" class="headerlink" title="13、变量的作用域（作用范围）"></a>13、变量的作用域（作用范围）</h2><p>变量作用域： 全局变量、局部变量</p><p>全局变量：</p><p>变量从程序开始到程序结束均有效。</p><p>在函数体外面定义的变量都是全局变量。</p><p>隐式全局变量：在函数体内部没有用 var 定义的变量。</p><p>局部变量（私有变量）：</p><p>在函数体内部通过 var 明确定义的变量。</p><p>局部变量的作用范围就是在该函数体内部。</p><p>所有的形参都是局部变量。</p><p>局部变量的优先权高于全局变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">  m++;</span><br><span class="line"></span><br><span class="line">  alert(m);</span><br><span class="line">  <span class="number">81</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(<span class="number">80</span>);</span><br></pre></td></tr></table></figure><h2 id="14、变量的提升"><a href="#14、变量的提升" class="headerlink" title="14、变量的提升"></a>14、变量的提升</h2><p>在函数体内部定义的变量，会将变量提升到函数的最顶端，只提升声明，但不赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">alert(m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">alert(m);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun();</span><br><span class="line"></span><br><span class="line">等价于：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m;</span><br><span class="line"></span><br><span class="line">alert(m);</span><br><span class="line"></span><br><span class="line">m = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">alert(m);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun();</span><br></pre></td></tr></table></figure><h2 id="15、同名函数"><a href="#15、同名函数" class="headerlink" title="15、同名函数"></a>15、同名函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个同名的函数，识别最后一个函数。</p><h2 id="16、函数的递归调用"><a href="#16、函数的递归调用" class="headerlink" title="16、函数的递归调用"></a>16、函数的递归调用</h2><p>递归：函数自己调用自己</p><p>递归本质：实现了循环</p><p>求阶乘：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnFac</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 参数n 代表 循环变量 初始值</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 循环条件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n * fnFac(n - <span class="number">1</span>); <span class="comment">// n-1 步长</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://p99.pstatp.com/large/46ea0001fb29e5c7f619"><br>请忽略我的这个灵魂画师。</p><p><img src="https://user-gold-cdn.xitu.io/2018/5/29/163aa02a511249dd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、函数的概念&quot;&gt;&lt;a href=&quot;#1、函数的概念&quot; class=&quot;headerlink&quot; title=&quot;1、函数的概念&quot;&gt;&lt;/a&gt;1、函数的概念&lt;/h2&gt;&lt;p&gt;函数的概念：函数就是一个工具，也就是具有某个特定功能的一小段代码块&lt;/p&gt;
&lt;h2 id=&quot;2、函数定义&quot;&gt;&lt;a href=&quot;#2、函数定义&quot; class=&quot;headerlink&quot; title=&quot;2、函数定义&quot;&gt;&lt;/a&gt;2、函数定义&lt;/h2&gt;&lt;h3 id=&quot;方式一：-函数调用可以在任意位置&quot;&gt;&lt;a href=&quot;#方式一：-函数调用可以在任意位置&quot; class=&quot;headerlink&quot; title=&quot;方式一： 函数调用可以在任意位置&quot;&gt;&lt;/a&gt;方式一： 函数调用可以在任意位置&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; 函数名(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  函数体;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;方式二：表达式定义—先定义，后调用，函数的调用一定是在定义后&quot;&gt;&lt;a href=&quot;#方式二：表达式定义—先定义，后调用，函数的调用一定是在定义后&quot; class=&quot;headerlink&quot; title=&quot;方式二：表达式定义—先定义，后调用，函数的调用一定是在定义后&quot;&gt;&lt;/a&gt;方式二：表达式定义—先定义，后调用，函数的调用一定是在定义后&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fn = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  函数体;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3、函数的调用&quot;&gt;&lt;a href=&quot;#3、函数的调用&quot; class=&quot;headerlink&quot; title=&quot;3、函数的调用&quot;&gt;&lt;/a&gt;3、函数的调用&lt;/h2&gt;&lt;p&gt;函数名([参数]);&lt;/p&gt;
&lt;p&gt;函数的调用还可以通过事件来调用&lt;/p&gt;
&lt;h2 id=&quot;4、函数和事件的关系&quot;&gt;&lt;a href=&quot;#4、函数和事件的关系&quot; class=&quot;headerlink&quot; title=&quot;4、函数和事件的关系&quot;&gt;&lt;/a&gt;4、函数和事件的关系&lt;/h2&gt;&lt;p&gt;所有的事件都会依赖与某个函数来执行&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://www.jonathon.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://www.jonathon.cn/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://www.jonathon.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>【转载】JavaScript中的同步和异步的个人理解</title>
    <link href="https://www.jonathon.cn/async.html"/>
    <id>https://www.jonathon.cn/async.html</id>
    <published>2018-09-29T02:31:31.000Z</published>
    <updated>2018-09-29T06:49:57.488Z</updated>
    
    <content type="html"><![CDATA[<p>你应该知道，javascript语言是一门“单线程”的语言，不像java语言，类继承Thread再来个thread.start就可以开辟一个线程，所以，javascript就像一条流水线，仅仅是一条流水线而已，要么加工，要么包装，不能同时进行多个任务和流程。</p><hr><p>那么这里说的同步和异步到底是什么呢？如果你真的不懂，我希望你认真读完这篇文章。其实我个人觉得js官方的文档在使用两个词的时候并不准确，包括很多其他词汇，都只是听起来高深，但实际应用好像跟这些词没半毛钱关系。例如“事件委托”这个词，不知道的人乍一看谁又能说出“事件委托”是什么意思？委托什么事件？怎么个委托，我看不如干脆就叫“事件在外层元素中的捕获”，虽然长一点，一下就能看懂。</p><hr><a id="more"></a><p>回归正轨，“同步”——一下就让人想到“一起”这个词；“异步”呢，从字面来讲，好像是在不同的（异）的ways上do something，那首先想到的词可能是“一边…一边…”,比如‘小明一边吃雪糕一边写作业’，这完全没毛病，雪糕吃完了，作业也写完了，这就是异步？那就大错特错了！</p><hr><p>其实同步和异步，无论如何，做事情的时候都是只有一条流水线（单线程），同步和异步的差别就在于这条流水线上各个流程的执行顺序不同。</p><hr><p>最基础的异步是setTimeout和setInterval函数，很常见，但是很少人有人知道其实这就是异步，因为它们可以控制js的执行顺序。我们也可以简单地理解为：可以改变程序正常执行顺序的操作就可以看成是异步操作。如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"1"</span> );</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log( <span class="string">"2"</span> )</span><br><span class="line">        &#125;, <span class="number">0</span> );</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log( <span class="string">"3"</span> )</span><br><span class="line">        &#125;, <span class="number">0</span> );</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log( <span class="string">"4"</span> )</span><br><span class="line">        &#125;, <span class="number">0</span> );</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"5"</span> );</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">输出顺序是 1 5 2 3 4</span></span><br></pre></td></tr></table></figure><hr><p>可见，尽管我们设置了setTimeout（function，time）中的等待时间为0，结果其中的function还是后执行。<br>火狐浏览器的api文档有这样一句话：Because even though setTimeout was<br> called with a delay of zero, it’s placed on a queue and scheduled to run at the next opportunity, not immediately. Currently executing code must complete before functions on the queue are executed, the resulting execution order may not be as expected.<br>意思就是：尽管setTimeout的time延迟时间为0，其中的function也会被放入一个队列中，等待下一个机会执行，当前的代码（指不需要加入队列中的程序）必须在该队列的程序完成之前完成，因此结果可能不与预期结果相同。</p><hr><p>这里说到了一个“队列”（即任务队列），该队列放的是什么呢，放的就是setTimeout中的function，这些function依次加入该队列，即该队列中所有function中的程序将会在该队列以外的所有代码执行完毕之后再以此执行，这是为什么呢？因为在执行程序的时候，浏览器会默认setTimeout以及ajax请求这一类的方法都是耗时程序（尽管可能不耗时），将其加入一个队列中，该队列是一个存储耗时程序的队列，在所有不耗时程序执行过后，再来依次执行该队列中的程序。</p><hr><p>又回到了最初的起点——javascript是单线程。单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。于是就有一个概念——任务队列。如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。于是JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。</p><hr><p>于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有等主线程任务执行完毕，”任务队列”开始通知主线程，请求执行任务，该任务才会进入主线程执行。</p><hr><p>具体来说，异步运行机制如下：<br>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。<br>（2）主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。<br>（3）一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。<br>（4）主线程不断重复上面的第三步。</p><hr><p>只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制。这个过程会不断重复。<br>“任务队列”是一个事件的队列（也可以理解成消息的队列），IO设备完成一项任务，就在”任务队列”中添加一个事件，表示相关的异步任务可以进入”执行栈”了。主线程读取”任务队列”，就是读取里面有哪些事件。<br>“任务队列”中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等），比如$(selectot).click(function)，这些都是相对耗时的操作。只要指定过这些事件的回调函数，这些事件发生时就会进入”任务队列”，等待主线程读取。<br>所谓”回调函数”（callback），就是那些会被主线程挂起来的代码，前面说的点击事件$(selectot).click(function)中的function就是一个回调函数。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。例如ajax的success，complete，error也都指定了各自的回调函数，这些函数就会加入“任务队列”中，等待执行。</p><hr><h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><p><a href="https://blog.csdn.net/qq_22855325/article/details/72958345" target="_blank" rel="noopener">JavaScript中的同步和异步的个人理解</a></p><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><p><img src="https://user-gold-cdn.xitu.io/2018/5/29/163aa02a511249dd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你应该知道，javascript语言是一门“单线程”的语言，不像java语言，类继承Thread再来个thread.start就可以开辟一个线程，所以，javascript就像一条流水线，仅仅是一条流水线而已，要么加工，要么包装，不能同时进行多个任务和流程。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;那么这里说的同步和异步到底是什么呢？如果你真的不懂，我希望你认真读完这篇文章。其实我个人觉得js官方的文档在使用两个词的时候并不准确，包括很多其他词汇，都只是听起来高深，但实际应用好像跟这些词没半毛钱关系。例如“事件委托”这个词，不知道的人乍一看谁又能说出“事件委托”是什么意思？委托什么事件？怎么个委托，我看不如干脆就叫“事件在外层元素中的捕获”，虽然长一点，一下就能看懂。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://www.jonathon.cn/tags/javascript/"/>
    
      <category term="同步和异步" scheme="https://www.jonathon.cn/tags/%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5/"/>
    
      <category term="任务队列" scheme="https://www.jonathon.cn/tags/%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Javascript基本语句</title>
    <link href="https://www.jonathon.cn/js0.html"/>
    <id>https://www.jonathon.cn/js0.html</id>
    <published>2018-09-16T02:52:03.000Z</published>
    <updated>2018-10-31T02:05:05.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、选择结构-（判断）"><a href="#1、选择结构-（判断）" class="headerlink" title="1、选择结构 （判断）"></a>1、选择结构 （判断）</h2><p>单分支选择结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">控制语句：</span><br><span class="line"></span><br><span class="line">    if(表达式)&#123;</span><br><span class="line"></span><br><span class="line">    语句组;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>说明： 表达式 一般为 条件表达式 或 逻辑表达式</p><p>执行逻辑：</p><p>如果if后面的表达式为真true，就执行语句组。</p><p>如果if后面的表达式为假false，就跳出if语句</p><p>控制语句:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if(表达式)&#123;</span><br><span class="line"></span><br><span class="line">    语句组;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line"></span><br><span class="line">    语句组;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行逻辑：</p><p>如果if后面的表达式为真，就执行if语句组，否则就执行else</p><p>图示：<br><img src="http://p9.pstatp.com/large/46d60004f42287d8ec3c"></p><ul><li><p>js 中布尔环境下 if 语句，下面的代表真假两种情况：</p></li><li><p>所有数字为真，0 为假</p></li><li><p>所有字符串为真，空字符串为假</p></li><li><p>null 和 undefined 为 假</p></li><li><p>所有对象为真</p><a id="more"></a></li></ul><h2 id="2、代码规范（扩展）"><a href="#2、代码规范（扩展）" class="headerlink" title="2、代码规范（扩展）"></a>2、代码规范（扩展）</h2><ul><li><p>嵌套的代码必须缩进（tab ）</p></li><li><p>每条语句结束后 可以用 分号或换行符 直接换行结束该语句 （建议用分号结束）</p></li><li><p>所有的标点符号 都是 英文半角状态</p></li><li><p>所有的代码严格区分大小写</p></li></ul><h2 id="3、多分支选择结构"><a href="#3、多分支选择结构" class="headerlink" title="3、多分支选择结构"></a>3、多分支选择结构</h2><p>控制语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if(表达式1)&#123;</span><br><span class="line">    语句组1;</span><br><span class="line">&#125;else if(表达式2)&#123;</span><br><span class="line">    语句组2;</span><br><span class="line">&#125;else if(表达式3)&#123;</span><br><span class="line">    语句组3;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    语句组n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行逻辑：</p><p>首先判断表达式1，如果结果为真，执行语句组1</p><p>如果结果为假，继续判断表达式2，执行逻辑同上…..</p><p>图示：<br><img src="http://p99.pstatp.com/large/46d80004bb9e7c77377f"></p><h2 id="4、if-语句的嵌套"><a href="#4、if-语句的嵌套" class="headerlink" title="4、if 语句的嵌套"></a>4、if 语句的嵌套</h2><p>语法结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if(表达式1)&#123;</span><br><span class="line"></span><br><span class="line">    if(表达式2)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;else&#123;</span><br><span class="line"></span><br><span class="line">        if(表达式3)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5、关于-if-使用时需要注意的问题总结"><a href="#5、关于-if-使用时需要注意的问题总结" class="headerlink" title="5、关于 if 使用时需要注意的问题总结"></a>5、关于 if 使用时需要注意的问题总结</h2><ul><li><p>else 后面不能有条件</p></li><li><p>else 可以省略的</p></li><li><p>else 永远与它同级的 并 离他最近的 if 语句配对</p></li><li><p>if 或 else 后面如果有多条语句，必须要用{}括起来</p></li><li><p>if 或 else 后面如果只有一条语句，{} 是可以省略的 （初学者不建议省略）</p></li></ul><h2 id="6、多分支结构-switch-开关语句"><a href="#6、多分支结构-switch-开关语句" class="headerlink" title="6、多分支结构 switch ( 开关语句 )"></a>6、多分支结构 switch ( 开关语句 )</h2><p>语法结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    switch( 表达式 )&#123;</span><br><span class="line"></span><br><span class="line">    case 常量表达式1 : 语句1;</span><br><span class="line"></span><br><span class="line">    case 常量表达式2 : 语句2;</span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    default : 语句 n;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于 switch 语句的几点说明：</p><ul><li><p>switch 表达式 一般为 常量表达式 或 变量</p></li><li><p>default 后面 没有条件</p></li><li><p>default 可以省略</p></li><li><p>如果 case 后面的语句没有 break ，会实现 case 穿透 （会继续向下执行）</p></li></ul><p>执行逻辑：</p><ul><li><p>用 switch 的表达式的值和 case 常量表达式的值做比较，如果相等，就执行该 case 对应的语句</p></li><li><p>如果 case 语句后面 有 break ， 则可中断 switch</p></li><li><p>如果 case 语句后面 没有 break，则实现 case 穿透， 继续向后执行</p></li></ul><h2 id="7、多分支-switch-和-if-的使用场景"><a href="#7、多分支-switch-和-if-的使用场景" class="headerlink" title="7、多分支 switch 和 if 的使用场景"></a>7、多分支 switch 和 if 的使用场景</h2><p>一般条件是一个范围的时候，可以使用 if</p><p>一般条件是一个具体值时，使用 switch 可以提高效率</p><h2 id="8、while-循环"><a href="#8、while-循环" class="headerlink" title="8、while 循环"></a>8、while 循环</h2><p>while 循环也叫 当型循环</p><p>控制语句结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while(表达式)&#123;</span><br><span class="line"></span><br><span class="line">    循环体;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说明：</p><p>表达式一般为条件表达式 ，也就是循环终止条件</p><p>循环体就是反复执行的任务</p><p>循环要素：</p><ul><li><p>循环变量，用来控制循环</p></li><li><p>循环变量的初始值</p></li><li><p>循环变量的终值（循环条件）</p></li><li><p>循环变量增值（步长） 控制循环次数</p></li><li><p>循环体<br>执行逻辑：</p></li></ul><p>首先判断表达式是否成立，如果表达式不成立，循环体一次也不执行，直接跳出循环体</p><p>如果表达式成立， 执行循环体，然后在判断表达式，直到表达式不成立退出整个循环</p><p><img src="http://p1.pstatp.com/large/46d70004f02ed7f269b4"></p><h2 id="9、do…while-循环"><a href="#9、do…while-循环" class="headerlink" title="9、do…while 循环"></a>9、do…while 循环</h2><p>do…while 循环 也叫做 直到型 循环<br>控制语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">do&#123;</span><br><span class="line"></span><br><span class="line">    循环体</span><br><span class="line"></span><br><span class="line">&#125;while(表达式);</span><br></pre></td></tr></table></figure></p><p>执行逻辑：</p><p>首先执行一次循环体，然后再判断表达式，如果表达式为假，退出循环</p><p>如果表达式为真，继续执行循环体，直到表达式为假，退出循环</p><p><img src="http://p3.pstatp.com/large/46d60004fa4e7bb4c9e2"></p><h2 id="10、while循环-和-do-while循环的区别"><a href="#10、while循环-和-do-while循环的区别" class="headerlink" title="10、while循环 和 do..while循环的区别"></a>10、while循环 和 do..while循环的区别</h2><p>while循环 先判断，后执行，循环体可能一次也不执行</p><p>do…while循环 先执行，后判断 ，循环体至少要执行一次</p><h2 id="11、for循环"><a href="#11、for循环" class="headerlink" title="11、for循环"></a>11、for循环</h2><p>控制语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">for(表达式 1;表达式 2;表达式 3)&#123;</span><br><span class="line"></span><br><span class="line">    循环体</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说明：</p><p>表达式1 通常表示为循环变量赋初始值</p><p>表达式1 可以省略，提到for的上面</p><p>表达式2 通常表示循环条件（终值）</p><p>表达式2不能省略，如果省略了表达式2，就会出现死循环</p><p>表达式3 通常表示循环变量增值（步长）</p><p>表达式3可以省略，提到循环体中</p><p>执行逻辑：</p><p>先执行表达式1，再判断表达式2，如果表达式2不成立，直接退出循环体</p><p>如果表达式2成立，执行循环体，再执行表达式3，再判断表达式2，直到表达式2为false退出循环</p><p><img src="http://p1.pstatp.com/large/46d60004fad4417c6096"></p><h2 id="在山竹的洗礼中，写完了这篇。纪念一下"><a href="#在山竹的洗礼中，写完了这篇。纪念一下" class="headerlink" title="在山竹的洗礼中，写完了这篇。纪念一下"></a>在山竹的洗礼中，写完了这篇。纪念一下</h2><p><img src="https://user-gold-cdn.xitu.io/2018/5/29/163aa02a511249dd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、选择结构-（判断）&quot;&gt;&lt;a href=&quot;#1、选择结构-（判断）&quot; class=&quot;headerlink&quot; title=&quot;1、选择结构 （判断）&quot;&gt;&lt;/a&gt;1、选择结构 （判断）&lt;/h2&gt;&lt;p&gt;单分支选择结构：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;控制语句：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(表达式)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    语句组;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;说明： 表达式 一般为 条件表达式 或 逻辑表达式&lt;/p&gt;
&lt;p&gt;执行逻辑：&lt;/p&gt;
&lt;p&gt;如果if后面的表达式为真true，就执行语句组。&lt;/p&gt;
&lt;p&gt;如果if后面的表达式为假false，就跳出if语句&lt;/p&gt;
&lt;p&gt;控制语句:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if(表达式)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    语句组;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    语句组;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;执行逻辑：&lt;/p&gt;
&lt;p&gt;如果if后面的表达式为真，就执行if语句组，否则就执行else&lt;/p&gt;
&lt;p&gt;图示：&lt;br&gt;&lt;img src=&quot;http://p9.pstatp.com/large/46d60004f42287d8ec3c&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;js 中布尔环境下 if 语句，下面的代表真假两种情况：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有数字为真，0 为假&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有字符串为真，空字符串为假&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;null 和 undefined 为 假&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有对象为真&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://www.jonathon.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://www.jonathon.cn/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://www.jonathon.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>走进JavaScript</title>
    <link href="https://www.jonathon.cn/javascript.html"/>
    <id>https://www.jonathon.cn/javascript.html</id>
    <published>2018-09-04T12:36:24.000Z</published>
    <updated>2018-09-08T03:09:48.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="推荐一本必买的书《JavaScript-高级程序与设计》。今天这篇文章先分享最基础入门的一些-Js-的知识。"><a href="#推荐一本必买的书《JavaScript-高级程序与设计》。今天这篇文章先分享最基础入门的一些-Js-的知识。" class="headerlink" title="推荐一本必买的书《JavaScript 高级程序与设计》。今天这篇文章先分享最基础入门的一些 Js 的知识。"></a>推荐一本必买的书《JavaScript 高级程序与设计》。今天这篇文章先分享最基础入门的一些 Js 的知识。</h2><p><img src="http://p3.pstatp.com/large/46da0000f9832f437a5f"></p><h2 id="1、什么是-JavaScript？"><a href="#1、什么是-JavaScript？" class="headerlink" title="1、什么是 JavaScript？"></a>1、什么是 JavaScript？</h2><p>JavaScript 是一门基于对象的客户端脚本语言，用来与 web 页面进行交互。</p><p>js 的主要作用：轮播图，表单验证，选项卡。。。。。</p><p>web 页面三层结构：</p><p>结构层 从语义角度来说，布置页面结构 html</p><p>表现层 从审美角度来说，用来美化页面 css</p><p>行为层 从交互角度来说，提升用户体验 js</p><a id="more"></a><h2 id="2、JavaScript-的组成？"><a href="#2、JavaScript-的组成？" class="headerlink" title="2、JavaScript 的组成？"></a>2、JavaScript 的组成？</h2><p>ECMAScript（欧洲计算机制造商协会） 不是一门语言，而是一个组织， 用来规范 JavaScript 的语法标准。</p><p>BOM （浏览器对象模型）</p><p>DOM （文档对象模型） 核心部分</p><h2 id="3、JavaScript-代码实现"><a href="#3、JavaScript-代码实现" class="headerlink" title="3、JavaScript 代码实现"></a>3、JavaScript 代码实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">js 代码嵌入到网页中，通过 script 标签对来实现</span><br><span class="line"></span><br><span class="line">js 中的 script 标签可以写在页面的任意位置（除了 title 中）</span><br><span class="line"></span><br><span class="line">通过&lt;script src=<span class="string">"xx.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">js 的代码按照从上到下的顺序执行</span><br><span class="line"></span><br><span class="line">某个 script 如果连接了外部文件，标签对中的代码不会被识别。</span><br></pre></td></tr></table></figure><h2 id="4、Javascript-的几个输出语句"><a href="#4、Javascript-的几个输出语句" class="headerlink" title="4、Javascript 的几个输出语句"></a>4、Javascript 的几个输出语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert() 通过弹出对话框的方式输出一段语句 ， 会阻塞浏览器的执行 使用 换行</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log() 控制台输出 用于代码调试 使用 换行</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write() 在浏览器中打印输出 使用br换行</span><br></pre></td></tr></table></figure><h2 id="5、Js-中的字面量（常量）"><a href="#5、Js-中的字面量（常量）" class="headerlink" title="5、Js 中的字面量（常量）"></a>5、Js 中的字面量（常量）</h2><p>数值 ：<br>整数<br>十进制整数 0-9 组成的数值（常用） 89<br>二进制整数 0- 1 组成的数值 1001<br>八进制整数 0–7 组成的数值 一般八进制 以 0 开头 023<br>十六进制整数 0-9 a–f 组成 一般十六进制 以 0x/X 开头<br>小数</p><p>字符 ：<br>js 中 字符可以用单引号 或 双引号 引起来<br> 但是要注意 引号嵌套问题： “ ‘’ “ 或 ‘ “ “ ‘</p><h2 id="6、Js-中标识符（变量）的命名规范"><a href="#6、Js-中标识符（变量）的命名规范" class="headerlink" title="6、Js 中标识符（变量）的命名规范"></a>6、Js 中标识符（变量）的命名规范</h2><p>标识符由字母、数字、下划线、$组成（中文也可以但一般不用）</p><p>不能用数字开头</p><p>不能用系统指定的一些关键字命名</p><p>标识符具有一定的含义</p><p>命名法：</p><p>驼峰式命名法:</p><p>大驼峰：IsMe<br>小驼峰：isMe</p><p>匈牙利命名法：</p><p>iNum 通常表示整数的变量 以 i 开头</p><p>fNum 通常表示小数的变量 以 f 开头</p><p>sStr 通常表示字符的变量 以 s 开头</p><p>oObj 通常表示对象的变量 以 o 开头</p><p>arr 通常表示数组类型的变量</p><p>reg 通常表示正则表达式的变量</p><h2 id="7、变量的定义和赋值"><a href="#7、变量的定义和赋值" class="headerlink" title="7、变量的定义和赋值"></a>7、变量的定义和赋值</h2><p>显示定义</p><p>通过 var 定义的变量</p><p>var iNum = 10; 表示 变量在定义的时候 同时又为该变量赋值</p><p>var fNum;</p><p>fNum = 2.3; 先定义一个变量，然后在为该变量赋值</p><p>定义多个变量：</p><p>var name=”程序员”,age = 28;</p><p>var name,age;</p><p>name = “jack”,age = 35;</p><p>隐式定义 : 变量定义的时候 var 可以省略的。</p><p>变量一定要先定义，后使用。</p><h2 id="8、Js-中输出结果时注意几个问题："><a href="#8、Js-中输出结果时注意几个问题：" class="headerlink" title="8、Js 中输出结果时注意几个问题："></a>8、Js 中输出结果时注意几个问题：</h2><p>1、如果输出的是字符，该字符一定要用引号括起来 比如： alert(hello); 错误 alert(“hello”);</p><p>2、如果输出的是一个变量的值，该变量一定不能用引号括起来</p><p>3、如果既要输出字符又要输出变量， 字符和变量之间 用 + 表示连接</p><p>4、如果输出的是一个数值，该数值可以不用引号括起来</p><h2 id="9、变量的数据类型"><a href="#9、变量的数据类型" class="headerlink" title="9、变量的数据类型"></a>9、变量的数据类型</h2><p>js 中变量的数据类型又变量的初始值来决定</p><p>基本数据类型：</p><p>数值类型 number</p><p>整数、小数 ，值可以有多个</p><p>字符类型 string</p><p>由单引号或双引号括起来 ， 值可以有多个</p><p>布尔类型 boolean</p><p>值只有两个 true、false， 这两个关键字不能用引号括起来</p><p>复合数据类型（引用数据类型）：</p><p>对象 object</p><p>数组 Array(本身也是一个 object)</p><p>特殊数据类型：</p><p>undefined 未定义的 （如果一个变量定义了，但没有给初始值，初始值就是 undefined）</p><p>null 表示 空 （本身也是一个对象 object）</p><p>测试变量的数据类型 typeof() 用法： typeof（变量名）</p><h2 id="10、运算符和表达式"><a href="#10、运算符和表达式" class="headerlink" title="10、运算符和表达式"></a>10、运算符和表达式</h2><p>运算符： 运算符号</p><p>表达式： 一个式子 变量、常量、或一个通过运算符连接的式子 2+3</p><p>运算符有哪些</p><p>该运算符对应的表达式的值如何计算</p><h2 id="11、算术运算符"><a href="#11、算术运算符" class="headerlink" title="11、算术运算符"></a>11、算术运算符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">+ - * <span class="regexp">/ % (双目：运算符两侧都有操作数)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">* :</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">表达式 ： 8*9</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">表达式的值：</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">1、如果运算符两侧都是数值，正常计算</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">2、如果运算符两侧中有一侧是纯数字字符串，则该字符串自动转成数值进行计算 7*"8"=56 ,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">否则 结果为NaN（不能正常计算的结果都是NaN） NaN：not a number 不是一个数字</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">3、如果表达式中有一个布尔值，自动将true解析为1，false解析为0 7*true</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">- /</span> % (运算结果同*)</span><br><span class="line"></span><br><span class="line">% 模运算符（求余数）：</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>%<span class="number">2</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>%<span class="number">4</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>%<span class="number">1</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">134</span>%<span class="number">10</span> = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="number">56</span>%<span class="number">10</span> = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">任何数 % <span class="number">10</span> = 个位数</span><br><span class="line"></span><br><span class="line">编程实现： <span class="number">7893</span> 计算这个数的各个位数和---（将这个数的个位 、十位、百位、千位取出就好）。</span><br><span class="line"></span><br><span class="line">个位 ： <span class="number">7893</span> % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">十位 ： 取整(<span class="number">7893</span> / <span class="number">10</span> ) % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">百位 ： 取整(<span class="number">7893</span> / <span class="number">100</span>) % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">千位 ： 取整(<span class="number">7893</span> / <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">+ ：</span><br><span class="line"></span><br><span class="line">算术运算</span><br><span class="line"></span><br><span class="line">表示连接符</span><br><span class="line"></span><br><span class="line">数值和字符串相加表示连接,.. <span class="number">100</span>+“<span class="number">90</span>” = <span class="number">10090</span></span><br><span class="line"></span><br><span class="line">练习：计算这个表达式的值 ： <span class="number">10</span> + <span class="string">"2"</span> - <span class="string">"1"</span> = <span class="number">101</span> 结果的类型是：number</span><br><span class="line"></span><br><span class="line"><span class="number">10</span> + <span class="string">"2"</span> - <span class="string">"1r"</span> = <span class="literal">NaN</span></span><br><span class="line"></span><br><span class="line">++ -- (单目：运算符只有一侧有操作数)</span><br><span class="line"></span><br><span class="line">++:自增 : ++ 或 -- 两侧的操作数必须是变量</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">表达式 ： i++ （后置++） 或 ++i（前置++）</span><br><span class="line"></span><br><span class="line">后置++和前置++的异同：</span><br><span class="line"></span><br><span class="line">相同点：</span><br><span class="line"></span><br><span class="line">自增变量都会加一</span><br><span class="line"></span><br><span class="line">不同点：</span><br><span class="line"></span><br><span class="line">表达式的值不同</span><br><span class="line"></span><br><span class="line">如果++在后 -&gt; j = i++; ,表达式的值是原i的值 （先赋值、再自增 ---&gt; 先将i的值赋值给整个表达式，然后i在自增）</span><br><span class="line"></span><br><span class="line">如果++在前 -&gt; j = ++i; ,表达式的值是自增后i的值（先自增，再赋值 ---&gt; 先将i的值自增<span class="number">1</span> ，再将i的值赋值给整个表达式）</span><br><span class="line"></span><br><span class="line">--：自减</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">j = i--; <span class="comment">// i = 1 j = 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> k = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">j = --k;</span><br><span class="line"></span><br><span class="line">j = <span class="number">8</span> k = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">k++ + ++k + k++ + k</span><br></pre></td></tr></table></figure><h2 id="12、关系运算符"><a href="#12、关系运算符" class="headerlink" title="12、关系运算符"></a>12、关系运算符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">运算符 ：　＞　　　＞＝　　　＜　　　＜＝　　　　==(等于)　　　!= (不等于)　　　　＝＝＝(全等)　　 !==(全不等)</span><br><span class="line"></span><br><span class="line">关系表达式 ：　<span class="number">2</span>&gt;<span class="number">3</span> <span class="number">6</span>&lt;<span class="number">7</span> <span class="number">7</span>&gt;=<span class="number">7</span> <span class="number">7</span>==<span class="number">9</span> <span class="number">7</span>&gt;<span class="string">"8"</span> <span class="string">"bds"</span> &lt; <span class="string">"bnd"</span></span><br><span class="line"></span><br><span class="line">关系表达式的值： <span class="literal">true</span> 或 <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、如果表达式的两侧都是数值型，正常比较 <span class="number">8</span> &gt; <span class="number">9</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、如果表达式的两侧都是字符型，正常比较 (按照字符的编码值进行比较 a:<span class="number">97</span> A:<span class="number">65</span> <span class="number">0</span>: <span class="number">48</span>) <span class="string">"b1"</span>&gt;<span class="string">"a"</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、如果表达式的两侧有一侧是纯数字字符串，字符串自动转成数值型，再正常比较</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、如果表达式的两侧有一侧是非数字字符串，不能自动转换，表示不能正常比较，结果为<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、所有不能正常比较的结果都是<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">==: 只比较值，不比较类型 ，值相等就为<span class="literal">true</span> ( <span class="number">100</span> == <span class="string">"100"</span> <span class="literal">true</span> <span class="number">100</span>!=<span class="string">"100"</span> <span class="literal">false</span> )</span><br><span class="line"></span><br><span class="line">===: 先比较类型， 再比较值 ，都满足条件结果为<span class="literal">true</span>，否则就是<span class="literal">false</span> (<span class="number">100</span> === <span class="string">"100"</span> <span class="literal">false</span> , <span class="number">100</span>!==<span class="string">"100"</span> <span class="literal">true</span> )</span><br></pre></td></tr></table></figure><h2 id="13、逻辑运算符"><a href="#13、逻辑运算符" class="headerlink" title="13、逻辑运算符"></a>13、逻辑运算符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">运算符： &amp;&amp;与(并且) ||或 ! 非(单目)</span><br><span class="line"></span><br><span class="line">逻辑表达式： <span class="number">3</span> &amp;&amp; <span class="number">5</span> <span class="number">3</span> || <span class="number">7</span> !<span class="number">9</span></span><br><span class="line"></span><br><span class="line">逻辑表达式的值：<span class="literal">true</span> 或 <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">js中 非<span class="number">0</span> 表示真，<span class="number">0</span> 表示假</span><br><span class="line"></span><br><span class="line">&amp;&amp; 对应的表达式的值：</span><br><span class="line"></span><br><span class="line">&amp;&amp; 符号两侧只要有一侧为假<span class="literal">false</span>， 表达式的值就是<span class="literal">false</span> 地球是方的 &amp;&amp; 王哲是男生--- &gt; <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">|| 对应的表达式的值：</span><br><span class="line"></span><br><span class="line">|| 符号两侧只要有一侧为真<span class="literal">true</span>，表达式的值就是<span class="literal">true</span> 地球是方的 || 王哲是男生 ---&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">! 对应的表达式的值：</span><br><span class="line"></span><br><span class="line">非真即假，非假即真</span><br></pre></td></tr></table></figure><h2 id="14、-条件运算符-三目"><a href="#14、-条件运算符-三目" class="headerlink" title="14、 条件运算符 ? : (三目)"></a>14、 条件运算符 ? : (三目)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">条件表达式 ： 表达式<span class="number">1</span> ? 表达式<span class="number">2</span> : 表达式<span class="number">3</span></span><br><span class="line"></span><br><span class="line">条件表达式的值：</span><br><span class="line"></span><br><span class="line">如果表达式<span class="number">1</span>的结果为真，整个条件表达式的值取表达式<span class="number">2</span>的值，否则整个条件表达式的值取表达式<span class="number">3</span>的值</span><br><span class="line"></span><br><span class="line">  &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"get-code"</span> bindtap=<span class="string">"handleGetYzm"</span>&gt;&#123;&#123;isReset?clickText:msgText&#125;&#125;&lt;<span class="regexp">/view&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>自己当时学js的时候一步步的啃红宝书，现在也不是很厉害。只是把自己的一些笔记发出来～ 不定时更新</p><p><img src="https://user-gold-cdn.xitu.io/2018/5/29/163aa02a511249dd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;推荐一本必买的书《JavaScript-高级程序与设计》。今天这篇文章先分享最基础入门的一些-Js-的知识。&quot;&gt;&lt;a href=&quot;#推荐一本必买的书《JavaScript-高级程序与设计》。今天这篇文章先分享最基础入门的一些-Js-的知识。&quot; class=&quot;headerlink&quot; title=&quot;推荐一本必买的书《JavaScript 高级程序与设计》。今天这篇文章先分享最基础入门的一些 Js 的知识。&quot;&gt;&lt;/a&gt;推荐一本必买的书《JavaScript 高级程序与设计》。今天这篇文章先分享最基础入门的一些 Js 的知识。&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://p3.pstatp.com/large/46da0000f9832f437a5f&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、什么是-JavaScript？&quot;&gt;&lt;a href=&quot;#1、什么是-JavaScript？&quot; class=&quot;headerlink&quot; title=&quot;1、什么是 JavaScript？&quot;&gt;&lt;/a&gt;1、什么是 JavaScript？&lt;/h2&gt;&lt;p&gt;JavaScript 是一门基于对象的客户端脚本语言，用来与 web 页面进行交互。&lt;/p&gt;
&lt;p&gt;js 的主要作用：轮播图，表单验证，选项卡。。。。。&lt;/p&gt;
&lt;p&gt;web 页面三层结构：&lt;/p&gt;
&lt;p&gt;结构层 从语义角度来说，布置页面结构 html&lt;/p&gt;
&lt;p&gt;表现层 从审美角度来说，用来美化页面 css&lt;/p&gt;
&lt;p&gt;行为层 从交互角度来说，提升用户体验 js&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://www.jonathon.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="https://www.jonathon.cn/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://www.jonathon.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>认识Vuex</title>
    <link href="https://www.jonathon.cn/vuex.html"/>
    <id>https://www.jonathon.cn/vuex.html</id>
    <published>2018-08-28T12:59:09.192Z</published>
    <updated>2018-09-03T09:29:34.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VueX"><a href="#VueX" class="headerlink" title="VueX"></a>VueX</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><h2 id="引入-Vuex（用-Vue-cli-或者其他架工具构建好项目）"><a href="#引入-Vuex（用-Vue-cli-或者其他架工具构建好项目）" class="headerlink" title="引入 Vuex（用 Vue cli 或者其他架工具构建好项目）"></a>引入 Vuex（用 Vue cli 或者其他架工具构建好项目）</h2><h3 id="利用-npm-包管理工具，进行安装-vuex。在控制命令行中输入下边的命令就可以了"><a href="#利用-npm-包管理工具，进行安装-vuex。在控制命令行中输入下边的命令就可以了" class="headerlink" title="利用 npm 包管理工具，进行安装 vuex。在控制命令行中输入下边的命令就可以了"></a>利用 npm 包管理工具，进行安装 vuex。在控制命令行中输入下边的命令就可以了</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><h3 id="新建一个-store-文件夹（这个不是必须的），并在文件夹下新建-store-js-文件，文件中引入我们的-vue-和-vuex。"><a href="#新建一个-store-文件夹（这个不是必须的），并在文件夹下新建-store-js-文件，文件中引入我们的-vue-和-vuex。" class="headerlink" title="新建一个 store 文件夹（这个不是必须的），并在文件夹下新建 store.js 文件，文件中引入我们的 vue 和 vuex。"></a>新建一个 store 文件夹（这个不是必须的），并在文件夹下新建 store.js 文件，文件中引入我们的 vue 和 vuex。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br></pre></td></tr></table></figure><h3 id="使用我们-vuex，引入之后用-Vue-use-进行引用。"><a href="#使用我们-vuex，引入之后用-Vue-use-进行引用。" class="headerlink" title="使用我们 vuex，引入之后用 Vue.use 进行引用。"></a>使用我们 vuex，引入之后用 Vue.use 进行引用。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(Vuex);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="在-main-js-中引入新建的-vuex-文件"><a href="#在-main-js-中引入新建的-vuex-文件" class="headerlink" title="在 main.js 中引入新建的 vuex 文件"></a>在 main.js 中引入新建的 vuex 文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> storeConfig <span class="keyword">from</span> <span class="string">"./vuex/store"</span>;</span><br></pre></td></tr></table></figure><h3 id="再然后-在实例化-Vue-对象时加入-store-对象"><a href="#再然后-在实例化-Vue-对象时加入-store-对象" class="headerlink" title="再然后 , 在实例化 Vue 对象时加入 store 对象 :"></a>再然后 , 在实例化 Vue 对象时加入 store 对象 :</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  router,</span><br><span class="line">  store, <span class="comment">//使用store</span></span><br><span class="line">  template: <span class="string">"&lt;App/&gt;"</span>,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="牛刀小试的-Demo"><a href="#牛刀小试的-Demo" class="headerlink" title="牛刀小试的 Demo"></a>牛刀小试的 Demo</h2><h3 id="现在我们-store-js-文件里增加一个常量对象。store-js-文件就是我们在引入-vuex-时的那个文件。"><a href="#现在我们-store-js-文件里增加一个常量对象。store-js-文件就是我们在引入-vuex-时的那个文件。" class="headerlink" title="现在我们 store.js 文件里增加一个常量对象。store.js 文件就是我们在引入 vuex 时的那个文件。"></a>现在我们 store.js 文件里增加一个常量对象。store.js 文件就是我们在引入 vuex 时的那个文件。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="用-export-default-封装代码，让外部可以引用"><a href="#用-export-default-封装代码，让外部可以引用" class="headerlink" title="用 export default 封装代码，让外部可以引用"></a>用 export default 封装代码，让外部可以引用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123; state &#125;);</span><br></pre></td></tr></table></figure><h3 id="新建一个-vue-的模板，位置在-components-文件夹下，名字叫-count-vue。在模板中我们引入我们刚建的-store-js-文件，并在模板中用输出-count-的值。"><a href="#新建一个-vue-的模板，位置在-components-文件夹下，名字叫-count-vue。在模板中我们引入我们刚建的-store-js-文件，并在模板中用输出-count-的值。" class="headerlink" title="新建一个 vue 的模板，位置在 components 文件夹下，名字叫 count.vue。在模板中我们引入我们刚建的 store.js 文件，并在模板中用输出 count 的值。"></a>新建一个 vue 的模板，位置在 components 文件夹下，名字叫 count.vue。在模板中我们引入我们刚建的 store.js 文件，并在模板中用输出 count 的值。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    &lt;template&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">            &lt;hr/</span>&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123;$store.state.count&#125;&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import store from '@/</span>vuex/store<span class="string">'</span></span><br><span class="line"><span class="string">export default&#123;</span></span><br><span class="line"><span class="string">    data()&#123; return&#123; msg:'</span>Hello Vuex<span class="string">',&#125;&#125;,</span></span><br><span class="line"><span class="string">        store</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在-store-js-文件中加入两个改变-state-的方法。"><a href="#在-store-js-文件中加入两个改变-state-的方法。" class="headerlink" title="在 store.js 文件中加入两个改变 state 的方法。"></a>在 store.js 文件中加入两个改变 state 的方法。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  add(state) &#123;</span><br><span class="line">    state.count += <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  reduce(state) &#123;</span><br><span class="line">    state.count -= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里的 mutations 是固定的写法，知道要改变 state 的数值的方法，必须写在 mutations 里就可以了。</p><h3 id="在-count-vue-模板中加入两个按钮，并调用-mutations-中的方法。"><a href="#在-count-vue-模板中加入两个按钮，并调用-mutations-中的方法。" class="headerlink" title="在 count.vue 模板中加入两个按钮，并调用 mutations 中的方法。"></a>在 count.vue 模板中加入两个按钮，并调用 mutations 中的方法。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"$store.commit('add')"</span>&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"$store.commit('reduce')"</span>&gt;-&lt;/button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>学习状态对象赋值给内部对象，也就是把 stroe.js 中的值，赋值给我们模板里 data 中的值。有三种赋值方式</p><h2 id="通过-computed-的计算属性直接赋值"><a href="#通过-computed-的计算属性直接赋值" class="headerlink" title="通过 computed 的计算属性直接赋值"></a>通过 computed 的计算属性直接赋值</h2><p>computed 属性可以在输出前，对 data 中的值进行改变，我们就利用这种特性把 store.js 中的 state 值赋值给我们模板中的 data 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是 return this.$store.state.count 这一句，一定要写 this，要不你会找不到$store 的。这种写法很好理解，但是写起来是比较麻烦的，那我们来看看第二种写法。</p><h2 id="通过-mapState-的对象来赋值"><a href="#通过-mapState-的对象来赋值" class="headerlink" title="通过 mapState 的对象来赋值"></a>通过 mapState 的对象来赋值</h2><p>我们首先要用 import 引入 mapState。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br></pre></td></tr></table></figure><p>然后还在 computed 计算属性里写如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState(&#123;</span><br><span class="line">  count: <span class="function"><span class="params">state</span> =&gt;</span> state.count <span class="comment">//理解为传入state对象，修改state.count属性</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里我们使用 ES6 的箭头函数来给 count 赋值。</p><h2 id="通过-mapState-的数组来赋值"><a href="#通过-mapState-的数组来赋值" class="headerlink" title="通过 mapState 的数组来赋值"></a>通过 mapState 的数组来赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState([<span class="string">"count"</span>]);</span><br></pre></td></tr></table></figure><p>这个算是最简单的写法了，在实际项目开发当中也经常这样使用。</p><p>Mutations 修改状态（$store.commit( )）</p><p>Vuex 提供了 commit 方法来修改状态，我们粘贴出 Demo 示例代码内容，简单回顾一下，我们在 button 上的修改方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">"$store.commit('add')"</span>&gt;+&lt;/button&gt;</span><br><span class="line">&lt;button @click=<span class="string">"$store.commit('reduce')"</span>&gt;-&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>store.js 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  add(state) &#123;</span><br><span class="line">    state.count += <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  reduce(state) &#123;</span><br><span class="line">    state.count -= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>传值：这只是一个最简单的修改状态的操作，在实际项目中我们常常需要在修改状态时传值。比如上边的例子，是我们每次只加 1，而现在我们要通过所传的值进行相加。其实我们只需要在 Mutations 里再加上一个参数，并在 commit 的时候传递就就可以了。我们来看具体代码：</p><p>现在 store.js 文件里给 add 方法加上一个参数 n。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  add(state, n) &#123;</span><br><span class="line">    state.count += n;</span><br><span class="line">  &#125;,</span><br><span class="line">  reduce(state) &#123;</span><br><span class="line">    state.count -= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 Count.vue 里修改按钮的 commit( )方法传递的参数，我们传递 10，意思就是每次加 10.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"$store.commit('add',10)"</span>&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"$store.commit('reduce')"</span>&gt;-&lt;/button&gt;</span><br><span class="line">&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模板获取-Mutations-方法"><a href="#模板获取-Mutations-方法" class="headerlink" title="模板获取 Mutations 方法"></a>模板获取 Mutations 方法</h2><p>实际开发中我们也不喜欢看到$store.commit( )这样的方法出现，我们希望跟调用模板里的方法一样调用。</p><p>例如：@click=”reduce” 就和没引用 vuex 插件一样。要达到这种写法，只需要简单的两部就可以了：</p><p>1、在模板 count.vue 里用 import 引入我们的 mapMutations：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState, mapMutations &#125; <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br></pre></td></tr></table></figure><p>2、在模板的 js 标签里添加 methods 属性，并加入 mapMutations</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">methods:mapMutations([ <span class="string">'add'</span>,<span class="string">'reduce'</span></span><br><span class="line">]),</span><br></pre></td></tr></table></figure><p>通过上边两部，我们已经可以在模板中直接使用我们的 reduce 或者 add 方法了，就像下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">"reduce"</span>&gt;-&lt;/button&gt;</span><br></pre></td></tr></table></figure><h2 id="getters-计算过滤操作"><a href="#getters-计算过滤操作" class="headerlink" title="getters 计算过滤操作"></a>getters 计算过滤操作</h2><p>getters 从表面是获得的意思，可以把他看作在获取数据之前进行的一种再编辑,相当于对数据的一个过滤和加工。你可以把它看作 store.js 的计算属性。</p><p>getters 基本用法：</p><p>比如我们现在要对 store.js 文件中的 count 进行一个计算属性的操作，就是在它输出前，给它加上 100.我们首先要在 store.js 里用 const 声明我们的 getters 属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  count: <span class="function"><span class="keyword">function</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (state.count += <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>写好了 gettters 之后，我们还需要在 Vuex.Store()里引入，由于之前我们已经引入了 state 和 mutations，所以引入里有三个引入属性。代码如下，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  getters</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在 store.js 里的配置算是完成了，我们需要到模板页对 computed 进行配置。在 vue 的构造器里边只能有一个 computed 属性，如果你写多个，只有最后一个 computed 属性可用，所以要对上次写的 computed 属性进行一个改造。改造时我们使用 ES6 中的展开运算符”…”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    ...mapState([<span class="string">"count"</span>]),</span><br><span class="line">    count()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>需要注意的是，你写了这个配置后，在每次 count 的值发生变化的时候，都会进行加 100 的操作。</p><h2 id="actions-异步修改状态"><a href="#actions-异步修改状态" class="headerlink" title="actions 异步修改状态"></a>actions 异步修改状态</h2><p>actions 和之前讲的 Mutations 功能基本一样，不同点是，actions 是异步的改变 state 状态，而 Mutations 是同步改变状态。至于什么是异步什么是同步这里我就不做太多解释了，如果你不懂自己去谷歌一下吧。</p><h3 id="在-store-js-中声明-actions"><a href="#在-store-js-中声明-actions" class="headerlink" title="在 store.js 中声明 actions"></a>在 store.js 中声明 actions</h3><p>actions 是可以调用 Mutations 里的方法的，我们还是继续在上节课的代码基础上进行学习，在 actions 里调用 add 和 reduce 两个方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  addAction(context) &#123;</span><br><span class="line">    context.commit(<span class="string">"add"</span>, <span class="number">10</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  reduceAction(&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">"reduce"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 actions 里写了两个方法 addAction 和 reduceAction，在方法体里，我们都用 commit 调用了 Mutations 里边的方法。细心的小伙伴会发现这两个方法传递的参数也不一样。</p><p>ontext：上下文对象，这里你可以理解称 store 本身。</p><p>{commit}：直接把 commit 对象传递过来，可以让方法体逻辑和代码更清晰明了。</p><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><p><img src="https://user-gold-cdn.xitu.io/2018/5/29/163aa02a511249dd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;VueX&quot;&gt;&lt;a href=&quot;#VueX&quot; class=&quot;headerlink&quot; title=&quot;VueX&quot;&gt;&lt;/a&gt;VueX&lt;/h2&gt;&lt;p&gt;Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。&lt;/p&gt;
&lt;h2 id=&quot;引入-Vuex（用-Vue-cli-或者其他架工具构建好项目）&quot;&gt;&lt;a href=&quot;#引入-Vuex（用-Vue-cli-或者其他架工具构建好项目）&quot; class=&quot;headerlink&quot; title=&quot;引入 Vuex（用 Vue cli 或者其他架工具构建好项目）&quot;&gt;&lt;/a&gt;引入 Vuex（用 Vue cli 或者其他架工具构建好项目）&lt;/h2&gt;&lt;h3 id=&quot;利用-npm-包管理工具，进行安装-vuex。在控制命令行中输入下边的命令就可以了&quot;&gt;&lt;a href=&quot;#利用-npm-包管理工具，进行安装-vuex。在控制命令行中输入下边的命令就可以了&quot; class=&quot;headerlink&quot; title=&quot;利用 npm 包管理工具，进行安装 vuex。在控制命令行中输入下边的命令就可以了&quot;&gt;&lt;/a&gt;利用 npm 包管理工具，进行安装 vuex。在控制命令行中输入下边的命令就可以了&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install vuex --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;新建一个-store-文件夹（这个不是必须的），并在文件夹下新建-store-js-文件，文件中引入我们的-vue-和-vuex。&quot;&gt;&lt;a href=&quot;#新建一个-store-文件夹（这个不是必须的），并在文件夹下新建-store-js-文件，文件中引入我们的-vue-和-vuex。&quot; class=&quot;headerlink&quot; title=&quot;新建一个 store 文件夹（这个不是必须的），并在文件夹下新建 store.js 文件，文件中引入我们的 vue 和 vuex。&quot;&gt;&lt;/a&gt;新建一个 store 文件夹（这个不是必须的），并在文件夹下新建 store.js 文件，文件中引入我们的 vue 和 vuex。&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Vue &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;vue&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Vuex &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;vuex&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用我们-vuex，引入之后用-Vue-use-进行引用。&quot;&gt;&lt;a href=&quot;#使用我们-vuex，引入之后用-Vue-use-进行引用。&quot; class=&quot;headerlink&quot; title=&quot;使用我们 vuex，引入之后用 Vue.use 进行引用。&quot;&gt;&lt;/a&gt;使用我们 vuex，引入之后用 Vue.use 进行引用。&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Vue.use(Vuex);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://www.jonathon.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vue" scheme="https://www.jonathon.cn/tags/vue/"/>
    
      <category term="javascript" scheme="https://www.jonathon.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>你还在发愁小程序自定义导航栏吗？</title>
    <link href="https://www.jonathon.cn/topbar.html"/>
    <id>https://www.jonathon.cn/topbar.html</id>
    <published>2018-08-23T01:41:06.000Z</published>
    <updated>2018-10-08T01:34:19.379Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2018/8/22/16561c33d8921db4?imageView2/1/w/1304/h/734/q/85/format/webp/interlace/1"></p><h2 id="你还在发愁小程序自定义导航栏吗？"><a href="#你还在发愁小程序自定义导航栏吗？" class="headerlink" title="你还在发愁小程序自定义导航栏吗？"></a>你还在发愁小程序自定义导航栏吗？</h2><p>先说一下我的需求吧，因为我们的小程序是嵌套了webview。 点击webview里面的项目，点的层级太深，用户后退很麻烦。然后pm又找了一个自定义的导航的小程序，发现别人可以，然后我就开始研究。</p><h2 id="小程序自定义导航栏开发注意点与参考文档"><a href="#小程序自定义导航栏开发注意点与参考文档" class="headerlink" title="小程序自定义导航栏开发注意点与参考文档"></a>小程序自定义导航栏开发注意点与参考文档</h2><p>微信官方设计指导中关于胶囊按钮的描述 由此推测胶囊宽度87pt=116px，设置之后，的确能产生较好的兼容性效果<br>[2018-07-06]根据测试截图发现微信胶囊宽度应该在96px左右，还有待研究<br>社区相关Q&amp;A：<a href="https://developers.weixin.qq.com/blogdetail?action=get_post_info&amp;docid=0008661e8a4b5047e6765eaa356000&amp;highline=statusBarHeight" target="_blank" rel="noopener">自定义标题栏高度计算</a><br>使用时注意方法与属性版本兼容性<br>完善之路：</p><ol><li>开一个项目采集设备的screenHeight,windowHeight,pixelRatio等信息到一个数据库中</li><li>微信提供这样一个数据库便于计算，或者微信优化自定义标题栏（譬如通知栏可以改变颜色但不要算在自定义范围内，给出胶囊宽高到通知栏距离到右侧屏幕边框距离等相关参数）<a id="more"></a></li></ol><h2 id="非自定义导航栏高度怎么计算？"><a href="#非自定义导航栏高度怎么计算？" class="headerlink" title="非自定义导航栏高度怎么计算？"></a>非自定义导航栏高度怎么计算？</h2><p>wx.getSystemInfo 和 wx.getSystemInfoSync 获取机器信息<br>screenHeight - windowHeight   计算标题栏高度<br>标题栏高度</p><p>‘iPhone’: 64,<br>‘iPhone X’: 88,<br>‘android’: 68</p><p>—— 不完全统计（ip6 , ip5 , ip6p , ipx , 小米mix2  , 小米5等综合了开发工具提供的数据和真机数据）所得有了这些从网上找到的资料，还有名叫猫圈的小程序的例子。开始代码实现了。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"window"</span>: &#123;        </span><br><span class="line">    <span class="string">"navigationBarBackgroundColor"</span>: <span class="string">"#fff"</span>,        </span><br><span class="line">    <span class="string">"navigationBarTextStyle"</span>: <span class="string">"black"</span>,        </span><br><span class="line">    <span class="string">"backgroundColor"</span>: <span class="string">"#fff"</span>,        </span><br><span class="line">    <span class="string">"navigationStyle"</span>: <span class="string">"custom"</span>    </span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>这里navigationStyle 配置修改之后就只剩一个胶囊按钮，也就意味着所有页面的导航都的自定义实现，你可以选择模版或者组件来开发，这里我是选择用的组件开发。</p><p>然后定义导航的各个数值，我是在app。js 里面定义的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title_height: <span class="string">"64"</span>,        </span><br><span class="line">statusbarHeight: <span class="string">"24"</span>,        </span><br><span class="line">titleIcon_height: <span class="string">"32"</span>,        </span><br><span class="line">titleIcon_width: <span class="string">"87"</span>,        </span><br><span class="line">title_top: <span class="string">"24"</span>,        </span><br><span class="line">title_text: <span class="string">"xxx"</span>, <span class="comment">// iphone X + 24        </span></span><br><span class="line">prefix: <span class="number">24</span></span><br></pre></td></tr></table></figure></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>wxml的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;  </span><br><span class="line">    &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"title"</span> style=<span class="string">"height:&#123;&#123;title_height&#125;&#125;px;padding-top:&#123;&#123;statusbarHeight&#125;&#125;px;background-color:&#123;&#123;isIndex?'#175dc6':'#fff'&#125;&#125;"</span>&gt;    </span><br><span class="line">        &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"title_text"</span> style=<span class="string">"color:&#123;&#123;isIndex?'#fff':'#000'&#125;&#125;"</span>&gt;&#123;&#123;title_text&#125;&#125;&lt;<span class="regexp">/view&gt;    </span></span><br><span class="line"><span class="regexp">        &lt;view wx:if="&#123;&#123;isShow&#125;&#125;" class="title_icon" style="top:&#123;&#123;title_top&#125;&#125;px;height:&#123;&#123;titleIcon_height&#125;&#125;px;width:&#123;&#123;titleIcon_width&#125;&#125;px;background-color:&#123;&#123;isIndex?'#175dc6':'#fff'&#125;&#125;"&gt;     </span></span><br><span class="line"><span class="regexp">        &lt;image bindtap="_goBack" class="floatL" src="/img</span><span class="regexp">/fanhui_icon.png"&gt;&lt;/im</span>age&gt;      </span><br><span class="line">        &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"floatL"</span>&gt;&lt;/view&gt;      </span><br><span class="line">        &lt;image bindtap=<span class="string">"_goHome"</span> src=<span class="string">"/img/home_icon.png"</span>&gt;&lt;/image&gt;    &lt;<span class="regexp">/view&gt;  &lt;/</span>view&gt;  &lt;view style='height:&#123;&#123;title_height&#125;&#125;px;'&gt;</span><br><span class="line">     &lt;/view&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br></pre></td></tr></table></figure></p><p>wxss的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.title &#123;  width: 100%;  background-color: #175dc6;  box-sizing: border-box;  position: fixed;  transform: translateZ(0);  z-index: 999990;&#125;</span><br><span class="line">.title_text &#123;  text-align: center;  font-size: 37rpx;  color: #fff;  line-height: 44px;&#125;</span><br><span class="line">.title_icon &#123;  background-color: #175dc6;  position: fixed;  top: 54rpx;  left: 16rpx;  border-radius: 64rpx;  box-sizing: border-box;  border: 0.5px solid #ebe48e;  display: flex;&#125;</span><br><span class="line">.title_icon image &#123;  <span class="attr">height</span>: <span class="number">20</span>px;  width: <span class="number">20</span>px;  padding-top: <span class="number">5</span>px;  display: inline-block;  overflow: hidden;&#125;</span><br><span class="line">.title_icon view &#123;  height: 18px;  border-left: 1px solid #bfb973;  margin-top: 6px;&#125;</span><br><span class="line">.floatL &#123;  <span class="attr">float</span>: left;&#125;</span><br><span class="line">.title_icon image:nth-<span class="keyword">of</span>-type(<span class="number">1</span>), .title_icon image:nth-<span class="keyword">of</span>-type(<span class="number">2</span>) &#123;  padding-right: <span class="number">10</span>px;  padding-bottom: <span class="number">10</span>px;  padding-left: <span class="number">10</span>px;&#125;</span><br></pre></td></tr></table></figure></p><p>js的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = getApp();</span><br><span class="line">Component(&#123;    </span><br><span class="line">    properties: &#123;        </span><br><span class="line">        isShow: &#123; <span class="comment">// 是否显示后退按钮            </span></span><br><span class="line">            type: <span class="built_in">String</span>,            </span><br><span class="line">            value: <span class="string">"1"</span>        </span><br><span class="line">        &#125;,        </span><br><span class="line">        isIndex: &#123; <span class="comment">// 是否主页            </span></span><br><span class="line">            type: <span class="built_in">Boolean</span>,            </span><br><span class="line">            value: <span class="literal">false</span>,        </span><br><span class="line">        &#125;,        </span><br><span class="line">        title_height: &#123; <span class="comment">//             </span></span><br><span class="line">            type: <span class="built_in">String</span>,            </span><br><span class="line">            value: app.config.title_height,        </span><br><span class="line">        &#125;,        </span><br><span class="line">        titleIcon_height: &#123;            </span><br><span class="line">            type: <span class="built_in">String</span>,            </span><br><span class="line">            value: app.config.titleIcon_height,        </span><br><span class="line">        &#125;,        </span><br><span class="line">        titleIcon_width: &#123;            </span><br><span class="line">            type: <span class="built_in">String</span>,            </span><br><span class="line">            value: app.config.titleIcon_width,        </span><br><span class="line">        &#125;,        </span><br><span class="line">        statusbarHeight: &#123;            </span><br><span class="line">            type: <span class="built_in">String</span>,            </span><br><span class="line">            value: app.config.statusbarHeight,        </span><br><span class="line">        &#125;,        </span><br><span class="line">        title_top: &#123;            </span><br><span class="line">            type: <span class="built_in">String</span>,            </span><br><span class="line">            value: app.config.title_top,        </span><br><span class="line">        &#125;,        </span><br><span class="line">        title_text: &#123;            </span><br><span class="line">            type: <span class="built_in">String</span>,            </span><br><span class="line">            value: app.config.title_text,        </span><br><span class="line">            &#125;,    </span><br><span class="line">        &#125;,    </span><br><span class="line">        methods: &#123;        </span><br><span class="line">            _goBack: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;            </span><br><span class="line">                wx.navigateBack(&#123;                </span><br><span class="line">                    delta: <span class="number">1</span>            </span><br><span class="line">                    &#125;);        </span><br><span class="line">            &#125;,        </span><br><span class="line">            _goHome: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;           </span><br><span class="line">                 wx.switchTab(&#123;                </span><br><span class="line">                     url: <span class="string">"/pages/index/index"</span>            </span><br><span class="line">                     &#125;);        </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这样组件就写好了  只需要在你每个页面里面用这个组件传不同的值就可以了。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;header isIndex=<span class="string">"true"</span> title_text=<span class="string">"首页"</span> isShow=<span class="string">""</span>&gt;&lt;/header&gt; 在首页的wxml应用。</span><br><span class="line">json 文件里面的配置  </span><br><span class="line">    <span class="string">"navigationBarTitleText"</span>: <span class="string">"啦啦啦"</span>,  </span><br><span class="line">    <span class="string">"navigationBarBackgroundColor"</span>: <span class="string">"#175dc6"</span>,  </span><br><span class="line">    <span class="string">"usingComponents"</span>: &#123;    </span><br><span class="line">        <span class="string">"header"</span>: <span class="string">"/components/layout/header/header"</span>  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="效果如图"><a href="#效果如图" class="headerlink" title="效果如图"></a>效果如图</h2><p><img src="https://user-gold-cdn.xitu.io/2018/8/22/16561d2c1c57e4cb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><br><img src="https://user-gold-cdn.xitu.io/2018/8/22/16561d2f5c5387aa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><br>适配上可能会有点问题，希望大神有更好的解决方案，告诉我哟。</p><h2 id="一步步记录自己的踩坑历程-我要做到我技术不是最好的，但我给你总结的小程序的东西是最简单粗暴的哈哈哈"><a href="#一步步记录自己的踩坑历程-我要做到我技术不是最好的，但我给你总结的小程序的东西是最简单粗暴的哈哈哈" class="headerlink" title="一步步记录自己的踩坑历程~我要做到我技术不是最好的，但我给你总结的小程序的东西是最简单粗暴的哈哈哈"></a>一步步记录自己的踩坑历程~我要做到我技术不是最好的，但我给你总结的小程序的东西是最简单粗暴的哈哈哈</h2><h2 id="🎉-送我一朵小发发～"><a href="#🎉-送我一朵小发发～" class="headerlink" title="🎉 送我一朵小发发～"></a>🎉 送我一朵小发发～</h2><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><p><img src="https://user-gold-cdn.xitu.io/2018/5/29/163aa02a511249dd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/8/22/16561c33d8921db4?imageView2/1/w/1304/h/734/q/85/format/webp/interlace/1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;你还在发愁小程序自定义导航栏吗？&quot;&gt;&lt;a href=&quot;#你还在发愁小程序自定义导航栏吗？&quot; class=&quot;headerlink&quot; title=&quot;你还在发愁小程序自定义导航栏吗？&quot;&gt;&lt;/a&gt;你还在发愁小程序自定义导航栏吗？&lt;/h2&gt;&lt;p&gt;先说一下我的需求吧，因为我们的小程序是嵌套了webview。 点击webview里面的项目，点的层级太深，用户后退很麻烦。然后pm又找了一个自定义的导航的小程序，发现别人可以，然后我就开始研究。&lt;/p&gt;
&lt;h2 id=&quot;小程序自定义导航栏开发注意点与参考文档&quot;&gt;&lt;a href=&quot;#小程序自定义导航栏开发注意点与参考文档&quot; class=&quot;headerlink&quot; title=&quot;小程序自定义导航栏开发注意点与参考文档&quot;&gt;&lt;/a&gt;小程序自定义导航栏开发注意点与参考文档&lt;/h2&gt;&lt;p&gt;微信官方设计指导中关于胶囊按钮的描述 由此推测胶囊宽度87pt=116px，设置之后，的确能产生较好的兼容性效果&lt;br&gt;[2018-07-06]根据测试截图发现微信胶囊宽度应该在96px左右，还有待研究&lt;br&gt;社区相关Q&amp;amp;A：&lt;a href=&quot;https://developers.weixin.qq.com/blogdetail?action=get_post_info&amp;amp;docid=0008661e8a4b5047e6765eaa356000&amp;amp;highline=statusBarHeight&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自定义标题栏高度计算&lt;/a&gt;&lt;br&gt;使用时注意方法与属性版本兼容性&lt;br&gt;完善之路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开一个项目采集设备的screenHeight,windowHeight,pixelRatio等信息到一个数据库中&lt;/li&gt;
&lt;li&gt;微信提供这样一个数据库便于计算，或者微信优化自定义标题栏（譬如通知栏可以改变颜色但不要算在自定义范围内，给出胶囊宽高到通知栏距离到右侧屏幕边框距离等相关参数）&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="微信小程序" scheme="https://www.jonathon.cn/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="javascript" scheme="https://www.jonathon.cn/tags/javascript/"/>
    
      <category term="web" scheme="https://www.jonathon.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序Webview最佳实践。</title>
    <link href="https://www.jonathon.cn/webview.html"/>
    <id>https://www.jonathon.cn/webview.html</id>
    <published>2018-08-20T12:16:48.000Z</published>
    <updated>2018-08-20T12:30:17.254Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2018/8/20/1655729929eb308e?imageView2/1/w/1080/h/320/q/85/format/webp/interlace/1"></p><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>因为公司项目是链接银行业务的这种需求，所以存在一些监管方面的问题，然后就有了小程序里面嵌套h5的这种解决方式。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>那些什么官方配置的什么，就不在这里说了。 跟着文档走，细心的慢慢配置的就好。思考一下，其实跳webview 全是一个页面只不过是不同的参数拼接成不同的url。在这个前提下呢，就可以开始封装方法辣～<br><a id="more"></a></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>先直接上代码了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  方法名：</span></span><br><span class="line"><span class="comment"> *    webView: 跳转到H5界面</span></span><br><span class="line"><span class="comment"> *  参数：</span></span><br><span class="line"><span class="comment"> *    path:  访问界面的路径</span></span><br><span class="line"><span class="comment"> *    param: 页面附带参数</span></span><br><span class="line"><span class="comment"> *    type: 0 默认 2 外部地址 1 redirectTo跳转</span></span><br><span class="line"><span class="comment"> *    finger  是否验证指纹</span></span><br><span class="line"><span class="comment"> *  返回：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">webView</span>(<span class="params">path, param, type = <span class="number">0</span>, finger = true</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> defu = app.config.h5url;</span><br><span class="line">    <span class="keyword">let</span> url = defu + <span class="string">"/"</span> + path;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="number">2</span>)</span><br><span class="line">        url = path;</span><br><span class="line">    <span class="keyword">let</span> to = <span class="string">'/pages/common/webview/webview?url='</span> + <span class="built_in">encodeURIComponent</span>(url);</span><br><span class="line">    <span class="keyword">if</span> (!isNull(param)) &#123;</span><br><span class="line">        param = param;</span><br><span class="line">        to = to + <span class="string">"&amp;param="</span> + <span class="built_in">encodeURIComponent</span>(<span class="built_in">JSON</span>.stringify(param));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="number">0</span> || type === <span class="number">2</span>) &#123;</span><br><span class="line">        wx.navigateTo(&#123;</span><br><span class="line">            url: to,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">        wx.redirectTo(&#123;</span><br><span class="line">            url: to,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法名：跳转到H5</span></span><br><span class="line"><span class="comment"> * 参数：</span></span><br><span class="line"><span class="comment"> *    servid : 服务Id 跳转到H5对应的url</span></span><br><span class="line"><span class="comment"> *    flag: 是否选择银行卡 (默认是)</span></span><br><span class="line"><span class="comment"> *    param：跳转到H5携带的参数 </span></span><br><span class="line"><span class="comment"> *    finger: 是否验证手势密码</span></span><br><span class="line"><span class="comment"> *    redirectTp 跳转类型: (默认0 nato 1 redirectto)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toH5</span>(<span class="params">servid, flag = true, param = &#123;&#125;, finger = true, redirectTp = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param)</span><br><span class="line">    <span class="keyword">if</span> (isNull(param))</span><br><span class="line">        param = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> h5url = getRouteH5(servid);</span><br><span class="line">    <span class="keyword">let</span> userInfo = getDataBase(<span class="string">"userInfo"</span>);</span><br><span class="line">    param.custInfo = getDataBase(<span class="string">"custInfo"</span>);</span><br><span class="line">    param.userInfo = &#123;</span><br><span class="line">        nickName: userInfo.nickName,</span><br><span class="line">        avatarUrl: userInfo.avatarUrl,</span><br><span class="line">        model: getDataBase(<span class="string">"deviceInfo"</span>).model</span><br><span class="line">    &#125;;</span><br><span class="line">    param.header = app.globalData.header;</span><br><span class="line">    <span class="keyword">if</span> (!app.globalData.first2H5) &#123;</span><br><span class="line">        param.first2H5 = <span class="string">"1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    webView(h5url.url, param, redirectTp, finger);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里定义了两个方法，一些url上面不明文传输之类的处理。 </p><p>小程序里面的代码结束了，然后我们在H5里面开始接受从小程序传过的来参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">因为h5是用vue来实现的，所以我们要在router beforeEach 里面进行判断。</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (navigator.userAgent.toLowerCase().indexOf(<span class="string">'micromessenger'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">// 说明是从小程序webview过来的</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">from</span>.name === <span class="literal">null</span> &amp;&amp; !Util.isNull(to.query.param)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(to.query.param)</span><br><span class="line">      <span class="keyword">let</span> param = <span class="built_in">JSON</span>.parse(to.query.param);</span><br><span class="line">      to.query.param = param;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">parseInt</span>(param.first2H5) === <span class="number">1</span> || Util.isNull(<span class="built_in">window</span>.localStorage.getItem(<span class="string">"loginCustInfo"</span>))) &#123;</span><br><span class="line">        <span class="built_in">window</span>.localStorage.setItem(<span class="string">"header"</span>, <span class="built_in">JSON</span>.stringify(param.header)); <span class="comment">// 设备指纹</span></span><br><span class="line">        <span class="built_in">window</span>.localStorage.setItem(<span class="string">"loginCustInfo"</span>, <span class="built_in">JSON</span>.stringify(param.custInfo));</span><br><span class="line">        <span class="built_in">window</span>.localStorage.setItem(<span class="string">"loginNickInfo"</span>, <span class="built_in">JSON</span>.stringify(param.userInfo));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>加班加了好久，最近也没怎么写，表达的不好，请大家多多原谅。 </p><p><img src="https://user-gold-cdn.xitu.io/2018/5/29/163aa02a511249dd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/8/20/1655729929eb308e?imageView2/1/w/1080/h/320/q/85/format/webp/interlace/1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;缘由&quot;&gt;&lt;a href=&quot;#缘由&quot; class=&quot;headerlink&quot; title=&quot;缘由&quot;&gt;&lt;/a&gt;缘由&lt;/h2&gt;&lt;p&gt;因为公司项目是链接银行业务的这种需求，所以存在一些监管方面的问题，然后就有了小程序里面嵌套h5的这种解决方式。&lt;/p&gt;
&lt;h2 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h2&gt;&lt;p&gt;那些什么官方配置的什么，就不在这里说了。 跟着文档走，细心的慢慢配置的就好。思考一下，其实跳webview 全是一个页面只不过是不同的参数拼接成不同的url。在这个前提下呢，就可以开始封装方法辣～&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="心得分享" scheme="https://www.jonathon.cn/categories/%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="webview" scheme="https://www.jonathon.cn/tags/webview/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序：带参数小程序相关知识</title>
    <link href="https://www.jonathon.cn/wechat-qrcode.html"/>
    <id>https://www.jonathon.cn/wechat-qrcode.html</id>
    <published>2018-08-04T03:18:34.000Z</published>
    <updated>2018-09-16T02:45:29.205Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2018/8/4/16502e26580f2d94?imageView2/1/w/1080/h/320/q/85/format/webp/interlace/1"></p><p>这个是带参数小程序码，我们项目里用到的就是，身份不同带不同参数，然后请求接口。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">onLoad(options) &#123;<span class="comment">//用户授权操作</span></span><br><span class="line">options.db ? wx.setStorageSync(<span class="string">'dbid'</span>, options.db) : <span class="string">''</span>; <span class="comment">//分享功能逻辑</span></span><br><span class="line">wx.setStorageSync(<span class="string">'scene'</span>, options.scene)<span class="comment">// 这里就是从url获取的的参数，发送给后端大哥，然后让他去请求接口生成。</span></span><br><span class="line">utils.login(<span class="keyword">this</span>.handleLogin.bind(<span class="keyword">this</span>),<span class="keyword">this</span>.handleReset.bind(<span class="keyword">this</span>));</span><br><span class="line"><span class="keyword">let</span> card = wx.getStorageSync(<span class="string">'UserCard'</span>),</span><br><span class="line">show = wx.getStorageSync(<span class="string">'seller'</span>),</span><br><span class="line">db = wx.getStorageSync(<span class="string">'dbid'</span>),</span><br><span class="line">ifHave = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(card.distribution_id!=<span class="string">''</span>)&#123;</span><br><span class="line">        ifHave = <span class="literal">true</span>;  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;    </span><br><span class="line">        ifHave = <span class="literal">false</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;     </span><br><span class="line">        userId:card.user_id,     </span><br><span class="line">        dbShow:ifHave &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>其实很简单，主要当时调试的时候，有一个坑提醒一下。小程序码唤醒的是你线上发布过的小程序，也怪自己当时没有好好读文档吃的亏。哈哈 。所以我就总结了一下。<br><a id="more"></a></p><h2 id="获取小程序页面二维码"><a href="#获取小程序页面二维码" class="headerlink" title="获取小程序页面二维码"></a>获取小程序页面二维码</h2><p>通过后台接口可以获取小程序任意页面的二维码，扫描该二维码可以直接进入小程序对应的页面Bug &amp; Tiptip：通过该接口，仅能生成已发布的小程序的二维码。tip：可以在开发者工具预览时生成开发版的带参二维码。tip：生成二维码的总数不限，但接口调用每天上限 100000 次（官方文档写的1万，有误，是10万次）。<br><img src="https://user-gold-cdn.xitu.io/2018/8/4/16502e5b12cd4963?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><p>第三方生成地址：（假如我理解有误，以下工具并非是这个用途，请在回帖内指出）</p><p>好推二维码：HotApp微信小程序统计-小程序参数二维码生成和精准统计平台</p><p>草料二维码：草料微信小程序参数二维码生成器</p><p>阿拉丁二维码：阿拉丁-二维码生成王</p><h2 id="相关讨论"><a href="#相关讨论" class="headerlink" title="相关讨论"></a>相关讨论</h2><h3 id="讨论一：带参二维码数量问题"><a href="#讨论一：带参二维码数量问题" class="headerlink" title="讨论一：带参二维码数量问题"></a>讨论一：带参二维码数量问题</h3><p>1、在公众平台首页的通知中说是限制1w个<br>2、通过接口获得带参数二维码。最多可生成带参数二维码10000个，请谨慎调用。<br>可参考调用文档。但是调用文档里面却又说是无数个<br>tip：生成二维码的总数不限，但接口调用每天上限 100000 次。<br>那么到底是什么情况？<br>是只能生成1w个，还是每天只能生成1w个，还是只能生成1w个并且每天只能扫码访问1w次？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">生成的数量无限制，但是每天只能调用接口100000次；另外，扫码访问次数也没有限制。</span><br></pre></td></tr></table></figure></p><h3 id="讨论二：获取页面二维码的接口，怎么老是提示错误啊"><a href="#讨论二：获取页面二维码的接口，怎么老是提示错误啊" class="headerlink" title="讨论二：获取页面二维码的接口，怎么老是提示错误啊"></a>讨论二：获取页面二维码的接口，怎么老是提示错误啊</h3><p>代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.request(&#123; <span class="attr">url</span>: <span class="string">'https://api.weixin.qq.com/cgi-bin/wxaapp/createwxaqrcode?access_token='</span>+app.globalData.token,</span><br><span class="line"> data: &#123;<span class="string">'path'</span>: <span class="string">"/pages/my/my?uid=1"</span>,<span class="string">'width'</span>: <span class="number">430</span>&#125;,</span><br><span class="line"> header: &#123; <span class="string">'content-type'</span>: <span class="string">'application/json'</span> &#125;, </span><br><span class="line"> success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123; <span class="built_in">console</span>.log(res.data) &#125;, </span><br><span class="line"> fail:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'isFail'</span>) &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>输出的结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;errcode: 44002, errmsg: &quot;empty post data hint: [tB1Kha0354vr18]&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>说是post data 是空的，哪位高人能帮忙解决下，多谢了！！！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">问题解决了，method: &quot;POST&quot;,只能通post方式传参数怎么文档也不说清楚？？？</span><br></pre></td></tr></table></figure></p><h3 id="相关讨论三：有大神-做过-小程序-二维码-获取吗"><a href="#相关讨论三：有大神-做过-小程序-二维码-获取吗" class="headerlink" title="相关讨论三：有大神 做过 小程序 二维码 获取吗"></a>相关讨论三：有大神 做过 小程序 二维码 获取吗</h3><p>小程序 获取二维码 接口 48001 无权限<br><img src="https://user-gold-cdn.xitu.io/2018/8/4/16502e8edde54a7a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">必须是已经上线的小程序才可以获取二维码</span><br></pre></td></tr></table></figure></p><h3 id="相关讨论四：生成二维码接口问题"><a href="#相关讨论四：生成二维码接口问题" class="headerlink" title="相关讨论四：生成二维码接口问题"></a>相关讨论四：生成二维码接口问题</h3><p>生成二维码接口问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;errcode&quot;:40159,&quot;errmsg&quot;:&quot;param path length invalid hint: [thH2ka0199vr23]&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>但长度不超（且比较短）和内容都是app.json定义好的，小程序也正式发布了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">找到原因了，是以json格式发过去。</span><br></pre></td></tr></table></figure></p><h3 id="相关讨论五：请教下各位，怎么样能把生成的二维码在界面上显示出来-二维码是在前端生成的"><a href="#相关讨论五：请教下各位，怎么样能把生成的二维码在界面上显示出来-二维码是在前端生成的" class="headerlink" title="相关讨论五：请教下各位，怎么样能把生成的二维码在界面上显示出来　二维码是在前端生成的"></a>相关讨论五：请教下各位，怎么样能把生成的二维码在界面上显示出来　二维码是在前端生成的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">前端哪有二维码， 二维码要么你自己后台做，要么官方接口做，都是后台的，</span><br><span class="line">发送参数出去， 请求回来得到 图片url， 用下载api，</span><br><span class="line">把文件下载下来就可以了；</span><br></pre></td></tr></table></figure><p>前端调用createwxaqrcode　可以返回数据啊，就是怎么转成图片，这个是后台请求官方接口，返回的图片；<br><img src="https://user-gold-cdn.xitu.io/2018/8/4/16502e8eddf4d2c5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不过，他返回的不是图片下载路径，而是就是一张图片文件， </span><br><span class="line">你得用后台，下载这张图片，返回你服务器这行图片的路径，</span><br><span class="line">再下载到手机了；</span><br></pre></td></tr></table></figure></p><h2 id="微信小程序参数二维码的应用场景"><a href="#微信小程序参数二维码的应用场景" class="headerlink" title="微信小程序参数二维码的应用场景"></a>微信小程序参数二维码的应用场景</h2><p>微信已经成为人与人沟通的重要工具，微信小程序的出现，更便捷地实现了人与物、人与服务的连接。而这些连接的重要入口，就是二维码。可以预见很多熟悉的场景：当你在收费停车区域停车，只需要用微信扫一扫停车位边上对应的二维码，对应的小程序就会自动计算你在哪个位置停了多久，你只需要直接在小程序上支付停车费即可。当你在餐厅点餐，只需要用微信扫一扫对应桌子上的二维码，即可完成点餐，服务员就会把对应的餐食送到。而你就餐完毕，还可以直接一键支付餐费，甚至对服务打分。微信小程序推出后，以上各种服务场景，搭建在微信小程序上，实现越来越多便利的功能。这些场景的实现，不再需要依靠复杂的app，小程序和微信公众号进行打通，快速实现各类服务功能。而以上场景的应用，入口就是“带参数的小程序二维码”。对应的停车位、对应的餐桌，即对应小程序的特定页面，智能化地方便用户使用和操作，而服务提供者，还可以实时监控使用行为、渠道数据等。</p><h2 id="一步步记录自己的踩坑历程-我要做到我技术不是最好的，但我给你总结的小程序的东西是最简单粗暴的哈哈哈"><a href="#一步步记录自己的踩坑历程-我要做到我技术不是最好的，但我给你总结的小程序的东西是最简单粗暴的哈哈哈" class="headerlink" title="一步步记录自己的踩坑历程~我要做到我技术不是最好的，但我给你总结的小程序的东西是最简单粗暴的哈哈哈"></a>一步步记录自己的踩坑历程~我要做到我技术不是最好的，但我给你总结的小程序的东西是最简单粗暴的哈哈哈</h2><p><img src="https://user-gold-cdn.xitu.io/2018/5/29/163aa02a511249dd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/8/4/16502e26580f2d94?imageView2/1/w/1080/h/320/q/85/format/webp/interlace/1&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个是带参数小程序码，我们项目里用到的就是，身份不同带不同参数，然后请求接口。代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;onLoad(options) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//用户授权操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;options.db ? wx.setStorageSync(&lt;span class=&quot;string&quot;&gt;&#39;dbid&#39;&lt;/span&gt;, options.db) : &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//分享功能逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wx.setStorageSync(&lt;span class=&quot;string&quot;&gt;&#39;scene&#39;&lt;/span&gt;, options.scene)&lt;span class=&quot;comment&quot;&gt;// 这里就是从url获取的的参数，发送给后端大哥，然后让他去请求接口生成。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;utils.login(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handleLogin.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;),&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handleReset.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; card = wx.getStorageSync(&lt;span class=&quot;string&quot;&gt;&#39;UserCard&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;show = wx.getStorageSync(&lt;span class=&quot;string&quot;&gt;&#39;seller&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db = wx.getStorageSync(&lt;span class=&quot;string&quot;&gt;&#39;dbid&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ifHave = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(card.distribution_id!=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ifHave = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ifHave = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setData(&amp;#123;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        userId:card.user_id,     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dbShow:ifHave &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实很简单，主要当时调试的时候，有一个坑提醒一下。小程序码唤醒的是你线上发布过的小程序，也怪自己当时没有好好读文档吃的亏。哈哈 。所以我就总结了一下。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="心得分享" scheme="https://www.jonathon.cn/categories/%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="微信小程序" scheme="https://www.jonathon.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Koa2+co-wechat快速搭建微信公众号服务器配置</title>
    <link href="https://www.jonathon.cn/koa2.html"/>
    <id>https://www.jonathon.cn/koa2.html</id>
    <published>2018-07-24T12:53:12.000Z</published>
    <updated>2018-07-25T01:44:32.982Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2018/7/24/164cc7334b3042aa?imageView2/1/w/1080/h/320/q/85/format/webp/interlace/1"></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我多嘴，说我知道微信公众号的配置流程，然后公司原来负责公众号的人离职了，让我先研究然后去教后端大哥，我也是醉了。但是多学一种东西，又何乐而不为呢。本来我也在学习 koa2，想给自己的小程序写接口。于是就开始了踩坑之路，也感谢网上很多大佬的分享。</p><h2 id="本地开发调试环境搭建"><a href="#本地开发调试环境搭建" class="headerlink" title="本地开发调试环境搭建"></a>本地开发调试环境搭建</h2><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- MacOs</span><br><span class="line">- Node v8<span class="number">.9</span><span class="number">.1</span></span><br><span class="line">- Koa2</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="微信公众平台开发的基本原理"><a href="#微信公众平台开发的基本原理" class="headerlink" title="微信公众平台开发的基本原理"></a>微信公众平台开发的基本原理</h3><p>我们先来看看微信公众平台开发的基本原理：在进行微信开发的时候,需要在我们在自己的服务器上部署服务对微信消息进行处理。微信服务器就相当于一个转发服务器。终端（手机、Pad 等）发起请求至微信服务器，微信服务器然后将请求转发给自定义服务（这里就是我们的具体实现）。服务处理完毕，然后转发给微信服务器，微信服务器再将具体响应回复到终端，通信协议为：HTTP；数据格式为：XML。我们的服务需要做的就是对请求做出响应，解析 XML,进行相应的处理后再返回特定的 XML。</p><h3 id="ngrok-微信本地开发"><a href="#ngrok-微信本地开发" class="headerlink" title="ngrok 微信本地开发"></a>ngrok 微信本地开发</h3><p>这儿我们了解到了接入微信开发需要一个自己的响应服务器，我们可以购买服务器或者新浪云百度云之类的服务。但是在我们开发阶段这样做是很麻烦的，我们需要搭建一个好用的本地调试环境，将内网映射出去，让外网能够访问的。这儿推荐使用<a href="https://www.ngrok.cc/" target="_blank" rel="noopener">Ngrok</a>服务。win、mac 都能方便使用，而且稳定，外网域名是固定的。打开它的网站[<a href="http://www.ngrok.cc/]" target="_blank" rel="noopener">www.ngrok.cc/]</a>(<a href="https://www.ngrok.cc/注册登录然后开通隧道。同时你需要下载相应的客户端在win中这是个批处理文件，运行它然后填入相应的隧道id回车即可，在Mac下载客户端目录中执行如下命令。" target="_blank" rel="noopener">https://www.ngrok.cc/注册登录然后开通隧道。同时你需要下载相应的客户端在win中这是个批处理文件，运行它然后填入相应的隧道id回车即可，在Mac下载客户端目录中执行如下命令。</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sunny clientid 隧道id</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/7/24/164cc4570f22b25b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><br>这里在ngrok官网上配置端口要设置成8080（设置成别的会造成token验证失败）</p><h2 id="初始化项目并安装依赖"><a href="#初始化项目并安装依赖" class="headerlink" title="初始化项目并安装依赖"></a>初始化项目并安装依赖</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir koa-wechat &amp;&amp; cd koa-wechat &amp;&amp; npm init -y</span><br><span class="line">$ npm i -S koa co-wechat</span><br></pre></td></tr></table></figure><p>推荐 cnpm 下载</p><h2 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h2><p>新建 app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> wechat = <span class="built_in">require</span>(<span class="string">'co-wechat'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line">app.use(<span class="keyword">async</span>(ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (ctx.path === <span class="string">'/wechat'</span>) &#123; <span class="comment">//自定义的路由，微信后台配置的url</span></span><br><span class="line">        <span class="keyword">await</span> next();      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.body = <span class="string">`Hello, koa2! Path is: <span class="subst">$&#123;ctx.path&#125;</span>`</span>;      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    app.use(wechat(&#123;      <span class="attr">token</span>: <span class="string">''</span>, <span class="comment">//微信后台配置的token</span></span><br><span class="line">    appid: <span class="string">''</span>, <span class="comment">//微信公众号的appid</span></span><br><span class="line">    encodingAESKey: <span class="string">''</span> <span class="comment">//微信公众号的encodingAESKey&#125;));</span></span><br><span class="line">    app.listen(<span class="number">8080</span>); <span class="comment">//端口要跟ngrok里配置的对应</span></span><br></pre></td></tr></table></figure><p>确认代码里的变量后，启动服务。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>我们运行 app.js，将服务跑起来，浏览器打开 localhost:8080 我们将能够看见返回了 Hello, koa2! Path is。这儿推荐使用 supervisor，它会监视你对代码的改动,并自动重动 Node</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g supervisor</span><br><span class="line">supervisor app.js</span><br></pre></td></tr></table></figure><p>接下来就是用前面讲的 ngrok 进行内网转发了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sunny clientid 隧道id</span><br></pre></td></tr></table></figure><p>此时已经离成功一步之遥。</p><h2 id="接入微信公众平台开发"><a href="#接入微信公众平台开发" class="headerlink" title="接入微信公众平台开发"></a>接入微信公众平台开发</h2><h3 id="接入流程"><a href="#接入流程" class="headerlink" title="接入流程"></a>接入流程</h3><p>接入微信公众平台开发，开发者需要按照如下步骤完成：1、填写服务器配置 2、验证服务器地址的有效性 3、依据接口文档实现业务逻辑我们登录微信公众平台接口测试帐号,登录后填写接口配置信息(你的 url 地址以及 token)，这时肯定不能配置成功的。我们需要验证服务器地址的有效性，开发者提交信息后，微信服务器将发送 GET 请求到填写的服务器地址 URL 上，GET 请求携带参数如下表所示：</p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>signature</td><td>微信加密签名，signature 结合了开发者填写的 token 参数和请求中的 timestamp 参数、nonce 参数。</td></tr><tr><td>timestamp</td><td>时间戳</td></tr><tr><td>nonce</td><td>随机数</td></tr><tr><td>echostr</td><td>随机字符串</td></tr></tbody></table><p>开发者通过检验 signature 对请求进行校验。若确认此次 GET 请求来自微信服务器，原样返回 echostr 参数内容，则接入生效，成为开发者成功，否则接入失败。加密/校验流程如下：<br>将 token、timestamp、nonce 三个参数进行字典序排序<br>将三个参数字符串拼接成一个字符串进行 sha1 加密<br>开发者获得加密后的字符串可与 signature 对比，标识该请求来源于微信</p><h4 id="幸运的是这些事-co-wechat-都帮我们做了～～～-送给作者一朵小发发"><a href="#幸运的是这些事-co-wechat-都帮我们做了～～～-送给作者一朵小发发" class="headerlink" title="幸运的是这些事 co-wechat 都帮我们做了～～～ 送给作者一朵小发发"></a>幸运的是这些事 co-wechat 都帮我们做了～～～ 送给作者一朵小发发</h4><p><img src="https://user-gold-cdn.xitu.io/2018/7/24/164cc52b60a170f3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><p>进入测试号的页面重新提交接口配置信息，你将会看见一个一闪而过的配置成功过提示框。恭喜，这标志着你正式跳进了微信开发的坑了。</p><h2 id="github-地址"><a href="#github-地址" class="headerlink" title="github 地址"></a>github 地址</h2><p><a href="https://https://github.com/Jiyr0119/Koa2-co-wechat/" target="_blank" rel="noopener">github.com/Jiyr0119/Ko…</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/zhaolandelong/article/details/79086077" target="_blank" rel="noopener">koa2 搭建</a><br><a href="https://segmentfault.com/a/1190000014515495" target="_blank" rel="noopener">koa2 公众号开发</a></p><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><p><img src="https://user-gold-cdn.xitu.io/2018/5/29/163aa02a511249dd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164cc7334b3042aa?imageView2/1/w/1080/h/320/q/85/format/webp/interlace/1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;我多嘴，说我知道微信公众号的配置流程，然后公司原来负责公众号的人离职了，让我先研究然后去教后端大哥，我也是醉了。但是多学一种东西，又何乐而不为呢。本来我也在学习 koa2，想给自己的小程序写接口。于是就开始了踩坑之路，也感谢网上很多大佬的分享。&lt;/p&gt;
&lt;h2 id=&quot;本地开发调试环境搭建&quot;&gt;&lt;a href=&quot;#本地开发调试环境搭建&quot; class=&quot;headerlink&quot; title=&quot;本地开发调试环境搭建&quot;&gt;&lt;/a&gt;本地开发调试环境搭建&lt;/h2&gt;&lt;h3 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- MacOs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Node v8&lt;span class=&quot;number&quot;&gt;.9&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Koa2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="心得分享" scheme="https://www.jonathon.cn/categories/%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="koa2" scheme="https://www.jonathon.cn/tags/koa2/"/>
    
      <category term="node.js" scheme="https://www.jonathon.cn/tags/node-js/"/>
    
      <category term="服务端" scheme="https://www.jonathon.cn/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 基本使用指南</title>
    <link href="https://www.jonathon.cn/Markdown-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97.html"/>
    <id>https://www.jonathon.cn/Markdown-基本使用指南.html</id>
    <published>2018-07-21T05:42:42.000Z</published>
    <updated>2018-07-21T06:03:07.201Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><blockquote><p>语法格式：<strong> ‘#’+’空格’+’文本’ </strong></p></blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="# 一级标题"></a># 一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="## 二级标题"></a>## 二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="### 三级标题"></a>### 三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="#### 四级标题"></a>#### 四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="##### 五级标题"></a>##### 五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="###### 六级标题"></a>###### 六级标题</h6><a id="more"></a><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><blockquote><p>无序列表语法格式：<strong> ‘-‘ + ‘空格’ ＋ ‘文本’ </strong></p></blockquote><ul><li>文本一</li><li>文本二</li><li>文本三</li></ul><blockquote><p>有序列表语法格式：<strong> ‘数字’ + ‘.’ + ‘空格’ + ‘文本’ </strong></p></blockquote><ol><li>文本一</li><li>文本二</li><li>文本三</li></ol><h4 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h4><p>在 Markdown 中插入链接不需要其他按钮，你只需要使用<code>［显示文本］(链接地址)</code>这样的格式语法即可。例如：<br><a href="https://www.jonathon.cn">我的博客</a><br>插入图片的语法与插入链接的语法很像，只是前面多了一个 <code>!</code>.语法如下：<br><code>![图片的标注](图片链接地址)</code></p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><blockquote><p>语法：<strong> ‘&gt;’+’空格’+’文本’ </strong></p></blockquote><p>例如：</p><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>如下是代码段的语法：</p><pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是代码段</span><br></pre></td></tr></table></figure></pre><p>例如：</p><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(alist)</span>:</span></span><br><span class="line"><span class="keyword">for</span> passnum <span class="keyword">in</span> range(len(alist)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line"><span class="comment">#print alist,passnum</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(passnum):</span><br><span class="line"><span class="keyword">if</span> alist[i]&gt;alist[i+<span class="number">1</span>]:</span><br><span class="line">temp = alist[i]</span><br><span class="line">alist[i] = alist[i+<span class="number">1</span>]</span><br><span class="line">alist[i+<span class="number">1</span>] = temp</span><br><span class="line"><span class="keyword">return</span> alist</span><br></pre></td></tr></table></figure></code></pre><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p><strong>Markdown　Extra</strong>　表格语法：</p><table><thead><tr><th>项目</th><th>价格</th></tr></thead><tbody><tr><td>iPhone</td><td>$560</td></tr><tr><td>iPad</td><td>$780</td></tr><tr><td>iMac</td><td>$1000</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">项目 | 价格</span><br><span class="line">-------- | ---</span><br><span class="line">iPhone | $<span class="number">560</span></span><br><span class="line">iPad | $<span class="number">780</span></span><br><span class="line">iMac | $<span class="number">1000</span></span><br></pre></td></tr></table></figure><p>可以使用冒号来定义对齐方式：</p><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td style="text-align:left">iPhone</td><td style="text-align:right">6000 元</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">iPad</td><td style="text-align:right">3800 元</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">iMac</td><td style="text-align:right">10000 元</td><td style="text-align:center">234</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目 | 价格 | 数量 |</span><br><span class="line">| :-------- | --------:| :--: |</span><br><span class="line">| iPhone | <span class="number">6000</span> 元 | <span class="number">5</span> |</span><br><span class="line">| iPad | <span class="number">3800</span> 元 | <span class="number">12</span> |</span><br><span class="line">| iMac | <span class="number">10000</span> 元 | <span class="number">234</span> |</span><br></pre></td></tr></table></figure><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>以上是最常见的 Markdown 的语法和格式，如果你还希望深入的学习 Markdown，可以参考这里<a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">Markdown语法</a>，</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常用语法&quot;&gt;&lt;a href=&quot;#常用语法&quot; class=&quot;headerlink&quot; title=&quot;常用语法&quot;&gt;&lt;/a&gt;常用语法&lt;/h3&gt;&lt;h4 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;语法格式：&lt;strong&gt; ‘#’+’空格’+’文本’ &lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;# 一级标题&quot;&gt;&lt;/a&gt;# 一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;## 二级标题&quot;&gt;&lt;/a&gt;## 二级标题&lt;/h2&gt;&lt;h3 id=&quot;三级标题&quot;&gt;&lt;a href=&quot;#三级标题&quot; class=&quot;headerlink&quot; title=&quot;### 三级标题&quot;&gt;&lt;/a&gt;### 三级标题&lt;/h3&gt;&lt;h4 id=&quot;四级标题&quot;&gt;&lt;a href=&quot;#四级标题&quot; class=&quot;headerlink&quot; title=&quot;#### 四级标题&quot;&gt;&lt;/a&gt;#### 四级标题&lt;/h4&gt;&lt;h5 id=&quot;五级标题&quot;&gt;&lt;a href=&quot;#五级标题&quot; class=&quot;headerlink&quot; title=&quot;##### 五级标题&quot;&gt;&lt;/a&gt;##### 五级标题&lt;/h5&gt;&lt;h6 id=&quot;六级标题&quot;&gt;&lt;a href=&quot;#六级标题&quot; class=&quot;headerlink&quot; title=&quot;###### 六级标题&quot;&gt;&lt;/a&gt;###### 六级标题&lt;/h6&gt;
    
    </summary>
    
      <category term="心得分享" scheme="https://www.jonathon.cn/categories/%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Markdown" scheme="https://www.jonathon.cn/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客 域名解析+个性化教程。</title>
    <link href="https://www.jonathon.cn/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B9%8B%E8%B7%AF.html"/>
    <id>https://www.jonathon.cn/Hexo博客搭建之路.html</id>
    <published>2018-07-20T05:26:38.000Z</published>
    <updated>2018-09-16T02:44:54.889Z</updated>
    
    <content type="html"><![CDATA[<p>本文全部内容是基于next主题。</p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p><a href="https://www.jianshu.com/p/189fd945f38f" target="_blank" rel="noopener">搭建个人博客-hexo+github详细完整步骤</a><br>大神这里已经写的很清楚了，我就不一一赘述了。送给大神一朵小发发～</p><h2 id="在右上角或者左上角实现fork-me-on-github"><a href="#在右上角或者左上角实现fork-me-on-github" class="headerlink" title="在右上角或者左上角实现fork me on github"></a>在右上角或者左上角实现fork me on github</h2><p>点击<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">这里</a>或者<a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">这里</a>挑选自己喜欢的样式，并复制代码。 例如，我是复制如下代码：<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"https://your-url"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"github-corner"</span> aria-label=<span class="string">"View source on Github"</span>&gt;&lt;svg width="80" height="80" viewBox="0 0 250 250" style="fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"&gt;&lt;path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"&gt;&lt;/path&gt;&lt;path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"&gt;&lt;/path&gt;&lt;path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>然后粘贴刚才复制的代码到themes/next/layout/_layout.swig文件中(放在<div class="headband"></div>的下面)，并把href改为你的github地址</p><h2 id="修改侧边栏自定义网站Icon"><a href="#修改侧边栏自定义网站Icon" class="headerlink" title="修改侧边栏自定义网站Icon"></a>修改侧边栏自定义网站Icon</h2><p>打开主题配置文件（_config.yml），搜索social,在<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">图标库</a>找自己喜欢的小图标，并将名字复制在如下位置，保存即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  掘金: https:<span class="comment">//juejin.im/user/593624feb123db006435aaae || spinner</span></span><br><span class="line">  知乎: https:<span class="comment">//www.zhihu.com/people/gao-jun-jie-87-18/activities || heartbeat</span></span><br></pre></td></tr></table></figure></p><h2 id="实现点击出现桃心效果"><a href="#实现点击出现桃心效果" class="headerlink" title="实现点击出现桃心效果"></a>实现点击出现桃心效果</h2><p>在网址输入如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//7u2ss1.com1.z0.glb.clouddn.com/love.js</span></span><br></pre></td></tr></table></figure></p><p>然后将里面的代码copy一下，新建love.js文件并且将代码复制进去，然后保存。将love.js文件放到路径/themes/next/source/js/src里面，然后打开\themes\next\layout_layout.swig文件,在末尾（在前面引用会出现找不到的bug）添加以下代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/love.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h2 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h2><p>打开\themes\next\source\css_custom\custom.styl,向里面加入：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主页文章添加阴影效果</span></span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: <span class="number">60</span>px;</span><br><span class="line">   margin-bottom: <span class="number">60</span>px;</span><br><span class="line">   padding: <span class="number">25</span>px;</span><br><span class="line">   background: #fff;</span><br><span class="line">   -webkit-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">.5</span>);</span><br><span class="line">   -moz-box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">5</span>px rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">.5</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>在已经搭建好gitpage+hexo的博客的前提下，买域名的步骤就不说了哈。</p><h3 id="解析DNS"><a href="#解析DNS" class="headerlink" title="解析DNS"></a>解析DNS</h3><p>购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”<br><img src="https://user-gold-cdn.xitu.io/2017/4/10/8e42a564bc7bfca393e0ac9c111f608a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><br>点击添加解析，记录类型选A或CNAME，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是jiyr0119.github.io。</span><br></pre></td></tr></table></figure></p><h3 id="在hexo中添加CNAME文件"><a href="#在hexo中添加CNAME文件" class="headerlink" title="在hexo中添加CNAME文件"></a>在hexo中添加CNAME文件</h3><p>接下来在你的hexo文件夹下source文件夹下新建一个CNAME文件,里面加上你刚刚购买的域名比如我的jonathon.cn<br>然后你就可以hexo clean，hexo g，hexo d 发布你的博客看看效果啦~</p><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><p><img src="https://user-gold-cdn.xitu.io/2018/5/29/163aa02a511249dd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://juejin.im/post/58eb2fd2a0bb9f006928f8c7" target="_blank" rel="noopener">hexo高阶教程</a><br><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文全部内容是基于next主题。&lt;/p&gt;
&lt;h2 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/189fd945f38f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;搭建个人博客-hexo+github详细完整步骤&lt;/a&gt;&lt;br&gt;大神这里已经写的很清楚了，我就不一一赘述了。送给大神一朵小发发～&lt;/p&gt;
&lt;h2 id=&quot;在右上角或者左上角实现fork-me-on-github&quot;&gt;&lt;a href=&quot;#在右上角或者左上角实现fork-me-on-github&quot; class=&quot;headerlink&quot; title=&quot;在右上角或者左上角实现fork me on github&quot;&gt;&lt;/a&gt;在右上角或者左上角实现fork me on github&lt;/h2&gt;&lt;p&gt;点击&lt;a href=&quot;http://tholman.com/github-corners/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;或者&lt;a href=&quot;https://blog.github.com/2008-12-19-github-ribbons/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;挑选自己喜欢的样式，并复制代码。 例如，我是复制如下代码：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="https://www.jonathon.cn/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="https://www.jonathon.cn/tags/hexo/"/>
    
  </entry>
  
</feed>
